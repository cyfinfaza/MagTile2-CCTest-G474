
MagTile2-CCTest-G474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063bc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006594  08006594  00007594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a4  080065a4  00008018  2**0
                  CONTENTS
  4 .ARM          00000000  080065a4  080065a4  00008018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065a4  080065a4  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a4  080065a4  000075a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065a8  080065a8  000075a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080065ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000018  080065c4  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080065c4  00008270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d84  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002247  00000000  00000000  00018dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001b018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d19  00000000  00000000  0001c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c58  00000000  00000000  0001ce29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119dc  00000000  00000000  00043a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010871d  00000000  00000000  0005545d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015db7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a78  00000000  00000000  0015dbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00162638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800657c 	.word	0x0800657c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	0800657c 	.word	0x0800657c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__gedf2>:
 8000590:	f04f 3cff 	mov.w	ip, #4294967295
 8000594:	e006      	b.n	80005a4 <__cmpdf2+0x4>
 8000596:	bf00      	nop

08000598 <__ledf2>:
 8000598:	f04f 0c01 	mov.w	ip, #1
 800059c:	e002      	b.n	80005a4 <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__cmpdf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b4:	bf18      	it	ne
 80005b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005ba:	d01b      	beq.n	80005f4 <__cmpdf2+0x54>
 80005bc:	b001      	add	sp, #4
 80005be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005c2:	bf0c      	ite	eq
 80005c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005c8:	ea91 0f03 	teqne	r1, r3
 80005cc:	bf02      	ittt	eq
 80005ce:	ea90 0f02 	teqeq	r0, r2
 80005d2:	2000      	moveq	r0, #0
 80005d4:	4770      	bxeq	lr
 80005d6:	f110 0f00 	cmn.w	r0, #0
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf58      	it	pl
 80005e0:	4299      	cmppl	r1, r3
 80005e2:	bf08      	it	eq
 80005e4:	4290      	cmpeq	r0, r2
 80005e6:	bf2c      	ite	cs
 80005e8:	17d8      	asrcs	r0, r3, #31
 80005ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ee:	f040 0001 	orr.w	r0, r0, #1
 80005f2:	4770      	bx	lr
 80005f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d102      	bne.n	8000604 <__cmpdf2+0x64>
 80005fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000602:	d107      	bne.n	8000614 <__cmpdf2+0x74>
 8000604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800060c:	d1d6      	bne.n	80005bc <__cmpdf2+0x1c>
 800060e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000612:	d0d3      	beq.n	80005bc <__cmpdf2+0x1c>
 8000614:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__aeabi_cdrcmple>:
 800061c:	4684      	mov	ip, r0
 800061e:	4610      	mov	r0, r2
 8000620:	4662      	mov	r2, ip
 8000622:	468c      	mov	ip, r1
 8000624:	4619      	mov	r1, r3
 8000626:	4663      	mov	r3, ip
 8000628:	e000      	b.n	800062c <__aeabi_cdcmpeq>
 800062a:	bf00      	nop

0800062c <__aeabi_cdcmpeq>:
 800062c:	b501      	push	{r0, lr}
 800062e:	f7ff ffb7 	bl	80005a0 <__cmpdf2>
 8000632:	2800      	cmp	r0, #0
 8000634:	bf48      	it	mi
 8000636:	f110 0f00 	cmnmi.w	r0, #0
 800063a:	bd01      	pop	{r0, pc}

0800063c <__aeabi_dcmpeq>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff fff4 	bl	800062c <__aeabi_cdcmpeq>
 8000644:	bf0c      	ite	eq
 8000646:	2001      	moveq	r0, #1
 8000648:	2000      	movne	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_dcmplt>:
 8000650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000654:	f7ff ffea 	bl	800062c <__aeabi_cdcmpeq>
 8000658:	bf34      	ite	cc
 800065a:	2001      	movcc	r0, #1
 800065c:	2000      	movcs	r0, #0
 800065e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000662:	bf00      	nop

08000664 <__aeabi_dcmple>:
 8000664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000668:	f7ff ffe0 	bl	800062c <__aeabi_cdcmpeq>
 800066c:	bf94      	ite	ls
 800066e:	2001      	movls	r0, #1
 8000670:	2000      	movhi	r0, #0
 8000672:	f85d fb08 	ldr.w	pc, [sp], #8
 8000676:	bf00      	nop

08000678 <__aeabi_dcmpge>:
 8000678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800067c:	f7ff ffce 	bl	800061c <__aeabi_cdrcmple>
 8000680:	bf94      	ite	ls
 8000682:	2001      	movls	r0, #1
 8000684:	2000      	movhi	r0, #0
 8000686:	f85d fb08 	ldr.w	pc, [sp], #8
 800068a:	bf00      	nop

0800068c <__aeabi_dcmpgt>:
 800068c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000690:	f7ff ffc4 	bl	800061c <__aeabi_cdrcmple>
 8000694:	bf34      	ite	cc
 8000696:	2001      	movcc	r0, #1
 8000698:	2000      	movcs	r0, #0
 800069a:	f85d fb08 	ldr.w	pc, [sp], #8
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fea1 	bl	80013ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f832 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 faf6 	bl	8000c9c <MX_GPIO_Init>
  MX_ADC1_Init();
 80006b0:	f000 f87a 	bl	80007a8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80006b4:	f000 fa1e 	bl	8000af4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80006b8:	f000 f96c 	bl	8000994 <MX_TIM1_Init>
  MX_TIM4_Init();
 80006bc:	f000 fa68 	bl	8000b90 <MX_TIM4_Init>
  MX_ADC2_Init();
 80006c0:	f000 f8f8 	bl	80008b4 <MX_ADC2_Init>
  MX_TIM6_Init();
 80006c4:	f000 fab2 	bl	8000c2c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006c8:	217f      	movs	r1, #127	@ 0x7f
 80006ca:	480c      	ldr	r0, [pc, #48]	@ (80006fc <main+0x5c>)
 80006cc:	f002 fe6c 	bl	80033a8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80006d0:	217f      	movs	r1, #127	@ 0x7f
 80006d2:	480b      	ldr	r0, [pc, #44]	@ (8000700 <main+0x60>)
 80006d4:	f002 fe68 	bl	80033a8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 80006d8:	4808      	ldr	r0, [pc, #32]	@ (80006fc <main+0x5c>)
 80006da:	f001 fd03 	bl	80020e4 <HAL_ADC_Start_IT>
  HAL_ADC_Start(&hadc2);
 80006de:	4808      	ldr	r0, [pc, #32]	@ (8000700 <main+0x60>)
 80006e0:	f001 fb16 	bl	8001d10 <HAL_ADC_Start>
  HAL_TIM_Base_Start(&htim3);
 80006e4:	4807      	ldr	r0, [pc, #28]	@ (8000704 <main+0x64>)
 80006e6:	f004 fb0f 	bl	8004d08 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80006ea:	4807      	ldr	r0, [pc, #28]	@ (8000708 <main+0x68>)
 80006ec:	f004 fb7c 	bl	8004de8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <main+0x6c>)
 80006f4:	f004 fc52 	bl	8004f9c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <main+0x58>
 80006fc:	20000034 	.word	0x20000034
 8000700:	200000a0 	.word	0x200000a0
 8000704:	20000158 	.word	0x20000158
 8000708:	200001f0 	.word	0x200001f0
 800070c:	2000010c 	.word	0x2000010c

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	2238      	movs	r2, #56	@ 0x38
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f005 ff00 	bl	8006524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000732:	2000      	movs	r0, #0
 8000734:	f003 fa98 	bl	8003c68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000742:	2340      	movs	r3, #64	@ 0x40
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074a:	2302      	movs	r3, #2
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800074e:	2304      	movs	r3, #4
 8000750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000752:	2354      	movs	r3, #84	@ 0x54
 8000754:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000756:	2306      	movs	r3, #6
 8000758:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 0318 	add.w	r3, r7, #24
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fb32 	bl	8003dd0 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000772:	f000 fc3f 	bl	8000ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2303      	movs	r3, #3
 800077c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2104      	movs	r1, #4
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fe30 	bl	80043f4 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800079a:	f000 fc2b 	bl	8000ff4 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	@ 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	@ 0x30
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f005 feaf 	bl	8006524 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c6:	4b39      	ldr	r3, [pc, #228]	@ (80008ac <MX_ADC1_Init+0x104>)
 80007c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ce:	4b37      	ldr	r3, [pc, #220]	@ (80008ac <MX_ADC1_Init+0x104>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b35      	ldr	r3, [pc, #212]	@ (80008ac <MX_ADC1_Init+0x104>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007da:	4b34      	ldr	r3, [pc, #208]	@ (80008ac <MX_ADC1_Init+0x104>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007e0:	4b32      	ldr	r3, [pc, #200]	@ (80008ac <MX_ADC1_Init+0x104>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e6:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <MX_ADC1_Init+0x104>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	4b2f      	ldr	r3, [pc, #188]	@ (80008ac <MX_ADC1_Init+0x104>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f2:	4b2e      	ldr	r3, [pc, #184]	@ (80008ac <MX_ADC1_Init+0x104>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b2c      	ldr	r3, [pc, #176]	@ (80008ac <MX_ADC1_Init+0x104>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007fe:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <MX_ADC1_Init+0x104>)
 8000800:	2201      	movs	r2, #1
 8000802:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000804:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <MX_ADC1_Init+0x104>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800080c:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <MX_ADC1_Init+0x104>)
 800080e:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_ADC1_Init+0x104>)
 8000816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800081a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081c:	4b23      	ldr	r3, [pc, #140]	@ (80008ac <MX_ADC1_Init+0x104>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000824:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_ADC1_Init+0x104>)
 8000826:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800082a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_ADC1_Init+0x104>)
 800082e:	2201      	movs	r2, #1
 8000830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000834:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <MX_ADC1_Init+0x104>)
 8000836:	221c      	movs	r2, #28
 8000838:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_ADC1_Init+0x104>)
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000840:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_ADC1_Init+0x104>)
 8000842:	2200      	movs	r2, #0
 8000844:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000846:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_ADC1_Init+0x104>)
 8000848:	2201      	movs	r2, #1
 800084a:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084c:	4817      	ldr	r0, [pc, #92]	@ (80008ac <MX_ADC1_Init+0x104>)
 800084e:	f001 f8a3 	bl	8001998 <HAL_ADC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000858:	f000 fbcc 	bl	8000ff4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000864:	4619      	mov	r1, r3
 8000866:	4811      	ldr	r0, [pc, #68]	@ (80008ac <MX_ADC1_Init+0x104>)
 8000868:	f002 fe32 	bl	80034d0 <HAL_ADCEx_MultiModeConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000872:	f000 fbbf 	bl	8000ff4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_ADC1_Init+0x108>)
 8000878:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800087a:	2306      	movs	r3, #6
 800087c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800087e:	2306      	movs	r3, #6
 8000880:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000882:	237f      	movs	r3, #127	@ 0x7f
 8000884:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000886:	2304      	movs	r3, #4
 8000888:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	@ (80008ac <MX_ADC1_Init+0x104>)
 8000894:	f002 f800 	bl	8002898 <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800089e:	f000 fba9 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	@ 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000034 	.word	0x20000034
 80008b0:	04300002 	.word	0x04300002

080008b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2220      	movs	r2, #32
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f005 fe2f 	bl	8006524 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008c6:	4b30      	ldr	r3, [pc, #192]	@ (8000988 <MX_ADC2_Init+0xd4>)
 80008c8:	4a30      	ldr	r2, [pc, #192]	@ (800098c <MX_ADC2_Init+0xd8>)
 80008ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <MX_ADC2_Init+0xd4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <MX_ADC2_Init+0xd4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <MX_ADC2_Init+0xd4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80008de:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <MX_ADC2_Init+0xd4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <MX_ADC2_Init+0xd4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ea:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <MX_ADC2_Init+0xd4>)
 80008ec:	2204      	movs	r2, #4
 80008ee:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <MX_ADC2_Init+0xd4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008f6:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <MX_ADC2_Init+0xd4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <MX_ADC2_Init+0xd4>)
 80008fe:	2201      	movs	r2, #1
 8000900:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000902:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <MX_ADC2_Init+0xd4>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_ADC2_Init+0xd4>)
 800090c:	2200      	movs	r2, #0
 800090e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000910:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <MX_ADC2_Init+0xd4>)
 8000912:	2200      	movs	r2, #0
 8000914:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000916:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_ADC2_Init+0xd4>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <MX_ADC2_Init+0xd4>)
 8000920:	2200      	movs	r2, #0
 8000922:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_ADC2_Init+0xd4>)
 8000926:	2201      	movs	r2, #1
 8000928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_ADC2_Init+0xd4>)
 800092e:	221c      	movs	r2, #28
 8000930:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_ADC2_Init+0xd4>)
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_ADC2_Init+0xd4>)
 800093a:	2200      	movs	r2, #0
 800093c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <MX_ADC2_Init+0xd4>)
 8000940:	2201      	movs	r2, #1
 8000942:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000944:	4810      	ldr	r0, [pc, #64]	@ (8000988 <MX_ADC2_Init+0xd4>)
 8000946:	f001 f827 	bl	8001998 <HAL_ADC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 8000950:	f000 fb50 	bl	8000ff4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_ADC2_Init+0xdc>)
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000958:	2306      	movs	r3, #6
 800095a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800095c:	2307      	movs	r3, #7
 800095e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000960:	237f      	movs	r3, #127	@ 0x7f
 8000962:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000964:	2304      	movs	r3, #4
 8000966:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_ADC2_Init+0xd4>)
 8000972:	f001 ff91 	bl	8002898 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 800097c:	f000 fb3a 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200000a0 	.word	0x200000a0
 800098c:	50000100 	.word	0x50000100
 8000990:	47520000 	.word	0x47520000

08000994 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09c      	sub	sp, #112	@ 0x70
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]
 80009c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2234      	movs	r2, #52	@ 0x34
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f005 fda8 	bl	8006524 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d4:	4b45      	ldr	r3, [pc, #276]	@ (8000aec <MX_TIM1_Init+0x158>)
 80009d6:	4a46      	ldr	r2, [pc, #280]	@ (8000af0 <MX_TIM1_Init+0x15c>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009da:	4b44      	ldr	r3, [pc, #272]	@ (8000aec <MX_TIM1_Init+0x158>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b42      	ldr	r3, [pc, #264]	@ (8000aec <MX_TIM1_Init+0x158>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1600;
 80009e6:	4b41      	ldr	r3, [pc, #260]	@ (8000aec <MX_TIM1_Init+0x158>)
 80009e8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80009ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b3f      	ldr	r3, [pc, #252]	@ (8000aec <MX_TIM1_Init+0x158>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f4:	4b3d      	ldr	r3, [pc, #244]	@ (8000aec <MX_TIM1_Init+0x158>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b3c      	ldr	r3, [pc, #240]	@ (8000aec <MX_TIM1_Init+0x158>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a00:	483a      	ldr	r0, [pc, #232]	@ (8000aec <MX_TIM1_Init+0x158>)
 8000a02:	f004 f929 	bl	8004c58 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a0c:	f000 faf2 	bl	8000ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a14:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a16:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4833      	ldr	r0, [pc, #204]	@ (8000aec <MX_TIM1_Init+0x158>)
 8000a1e:	f004 fe33 	bl	8005688 <HAL_TIM_ConfigClockSource>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a28:	f000 fae4 	bl	8000ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a2c:	482f      	ldr	r0, [pc, #188]	@ (8000aec <MX_TIM1_Init+0x158>)
 8000a2e:	f004 fa53 	bl	8004ed8 <HAL_TIM_PWM_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a38:	f000 fadc 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4827      	ldr	r0, [pc, #156]	@ (8000aec <MX_TIM1_Init+0x158>)
 8000a50:	f005 fbf8 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a5a:	f000 facb 	bl	8000ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5e:	2360      	movs	r3, #96	@ 0x60
 8000a60:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 10;
 8000a62:	230a      	movs	r3, #10
 8000a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	481a      	ldr	r0, [pc, #104]	@ (8000aec <MX_TIM1_Init+0x158>)
 8000a84:	f004 fcec 	bl	8005460 <HAL_TIM_PWM_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a8e:	f000 fab1 	bl	8000ff4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aaa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ab8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4807      	ldr	r0, [pc, #28]	@ (8000aec <MX_TIM1_Init+0x158>)
 8000ad0:	f005 fc4e 	bl	8006370 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000ada:	f000 fa8b 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ade:	4803      	ldr	r0, [pc, #12]	@ (8000aec <MX_TIM1_Init+0x158>)
 8000ae0:	f000 fbc8 	bl	8001274 <HAL_TIM_MspPostInit>

}
 8000ae4:	bf00      	nop
 8000ae6:	3770      	adds	r7, #112	@ 0x70
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000010c 	.word	0x2000010c
 8000af0:	40012c00 	.word	0x40012c00

08000af4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <MX_TIM3_Init+0x94>)
 8000b14:	4a1d      	ldr	r2, [pc, #116]	@ (8000b8c <MX_TIM3_Init+0x98>)
 8000b16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <MX_TIM3_Init+0x94>)
 8000b1a:	22a8      	movs	r2, #168	@ 0xa8
 8000b1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_TIM3_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <MX_TIM3_Init+0x94>)
 8000b26:	2264      	movs	r2, #100	@ 0x64
 8000b28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_TIM3_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <MX_TIM3_Init+0x94>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b36:	4814      	ldr	r0, [pc, #80]	@ (8000b88 <MX_TIM3_Init+0x94>)
 8000b38:	f004 f88e 	bl	8004c58 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b42:	f000 fa57 	bl	8000ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <MX_TIM3_Init+0x94>)
 8000b54:	f004 fd98 	bl	8005688 <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b5e:	f000 fa49 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b62:	2320      	movs	r3, #32
 8000b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <MX_TIM3_Init+0x94>)
 8000b70:	f005 fb68 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b7a:	f000 fa3b 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000158 	.word	0x20000158
 8000b8c:	40000400 	.word	0x40000400

08000b90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <MX_TIM4_Init+0x94>)
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c28 <MX_TIM4_Init+0x98>)
 8000bb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <MX_TIM4_Init+0x94>)
 8000bb6:	22a8      	movs	r2, #168	@ 0xa8
 8000bb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_TIM4_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_TIM4_Init+0x94>)
 8000bc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <MX_TIM4_Init+0x94>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_TIM4_Init+0x94>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bd4:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <MX_TIM4_Init+0x94>)
 8000bd6:	f004 f83f 	bl	8004c58 <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000be0:	f000 fa08 	bl	8000ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <MX_TIM4_Init+0x94>)
 8000bf2:	f004 fd49 	bl	8005688 <HAL_TIM_ConfigClockSource>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000bfc:	f000 f9fa 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c00:	2320      	movs	r3, #32
 8000c02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_TIM4_Init+0x94>)
 8000c0e:	f005 fb19 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c18:	f000 f9ec 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3720      	adds	r7, #32
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200001a4 	.word	0x200001a4
 8000c28:	40000800 	.word	0x40000800

08000c2c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_TIM6_Init+0x68>)
 8000c3e:	4a16      	ldr	r2, [pc, #88]	@ (8000c98 <MX_TIM6_Init+0x6c>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1680;
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_TIM6_Init+0x68>)
 8000c44:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8000c48:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_TIM6_Init+0x68>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8000c50:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <MX_TIM6_Init+0x68>)
 8000c52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c56:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_TIM6_Init+0x68>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c5e:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <MX_TIM6_Init+0x68>)
 8000c60:	f003 fffa 	bl	8004c58 <HAL_TIM_Base_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000c6a:	f000 f9c3 	bl	8000ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c6e:	2320      	movs	r3, #32
 8000c70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <MX_TIM6_Init+0x68>)
 8000c7c:	f005 fae2 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000c86:	f000 f9b5 	bl	8000ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001f0 	.word	0x200001f0
 8000c98:	40001000 	.word	0x40001000

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	4a23      	ldr	r2, [pc, #140]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cbe:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a1d      	ldr	r2, [pc, #116]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	4a11      	ldr	r2, [pc, #68]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_GPIO_Init+0xa8>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2120      	movs	r1, #32
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1a:	f002 ff73 	bl	8003c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d1e:	2320      	movs	r3, #32
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d38:	f002 fde2 	bl	8003900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d130      	bne.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x74>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d60:	f002 ff68 	bl	8003c34 <HAL_GPIO_TogglePin>
    	HAL_ADC_Start(&hadc2);
 8000d64:	4818      	ldr	r0, [pc, #96]	@ (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d66:	f000 ffd3 	bl	8001d10 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc2, 5);
 8000d6a:	2105      	movs	r1, #5
 8000d6c:	4816      	ldr	r0, [pc, #88]	@ (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d6e:	f001 f8b3 	bl	8001ed8 <HAL_ADC_PollForConversion>
        temp_adc_sample = HAL_ADC_GetValue(&hadc2);
 8000d72:	4815      	ldr	r0, [pc, #84]	@ (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d74:	f001 fb0e 	bl	8002394 <HAL_ADC_GetValue>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d7c:	6013      	str	r3, [r2, #0]
        temp_adc_voltage = (temp_adc_sample) / 65.535f * 3.261915f;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d8a:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000dd0 <HAL_TIM_PeriodElapsedCallback+0x88>
 8000d8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d92:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000dd4 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8000d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d9c:	edc3 7a00 	vstr	s15, [r3]
        temp_value = (temp_adc_voltage - 500.0f)/10.0f;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000da2:	edd3 7a00 	vldr	s15, [r3]
 8000da6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000ddc <HAL_TIM_PeriodElapsedCallback+0x94>
 8000daa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000dae:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000db8:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40001000 	.word	0x40001000
 8000dc8:	200000a0 	.word	0x200000a0
 8000dcc:	2000024c 	.word	0x2000024c
 8000dd0:	428311ec 	.word	0x428311ec
 8000dd4:	4050c337 	.word	0x4050c337
 8000dd8:	20000250 	.word	0x20000250
 8000ddc:	43fa0000 	.word	0x43fa0000
 8000de0:	20000254 	.word	0x20000254
 8000de4:	00000000 	.word	0x00000000

08000de8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
    adc_sample = HAL_ADC_GetValue(hadc);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f001 facf 	bl	8002394 <HAL_ADC_GetValue>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a67      	ldr	r2, [pc, #412]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000dfa:	6013      	str	r3, [r2, #0]
//    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    opamp_output = (float)adc_sample / 65535.0f * 3.261915f;
 8000dfc:	4b66      	ldr	r3, [pc, #408]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e08:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8000f9c <HAL_ADC_ConvCpltCallback+0x1b4>
 8000e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e10:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8000fa0 <HAL_ADC_ConvCpltCallback+0x1b8>
 8000e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e18:	4b62      	ldr	r3, [pc, #392]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8000e1a:	edc3 7a00 	vstr	s15, [r3]
    current_reading = (opamp_output) / 0.12f * 0.962566f;//* 1.106593;
 8000e1e:	4b61      	ldr	r3, [pc, #388]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8000e20:	ed93 7a00 	vldr	s14, [r3]
 8000e24:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8000fa8 <HAL_ADC_ConvCpltCallback+0x1c0>
 8000e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e2c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8000fac <HAL_ADC_ConvCpltCallback+0x1c4>
 8000e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e34:	4b5e      	ldr	r3, [pc, #376]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8000e36:	edc3 7a00 	vstr	s15, [r3]
    ctrl_out = current_reading < current_setpoint;
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8000e3c:	ed93 7a00 	vldr	s14, [r3]
 8000e40:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8000e42:	edd3 7a00 	vldr	s15, [r3]
 8000e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4e:	bf4c      	ite	mi
 8000e50:	2301      	movmi	r3, #1
 8000e52:	2300      	movpl	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b57      	ldr	r3, [pc, #348]	@ (8000fb8 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8000e5a:	701a      	strb	r2, [r3, #0]
//	} else {
//		TIM1->CCR1 = 0;
//	}
//    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ctrl_out);
    // implement PID control
	if (current_setpoint > 3 || current_reading > 3.2) {
 8000e5c:	4b55      	ldr	r3, [pc, #340]	@ (8000fb4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8000e5e:	edd3 7a00 	vldr	s15, [r3]
 8000e62:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8000e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6e:	dc0c      	bgt.n	8000e8a <HAL_ADC_ConvCpltCallback+0xa2>
 8000e70:	4b4f      	ldr	r3, [pc, #316]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fb33 	bl	80004e0 <__aeabi_f2d>
 8000e7a:	a345      	add	r3, pc, #276	@ (adr r3, 8000f90 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff fc04 	bl	800068c <__aeabi_dcmpgt>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <HAL_ADC_ConvCpltCallback+0xb2>
		TIM1->CCR1 = 0;
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8000fbc <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	635a      	str	r2, [r3, #52]	@ 0x34
		current_setpoint = 0;
 8000e90:	4b48      	ldr	r3, [pc, #288]	@ (8000fb4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
		return;
 8000e98:	e077      	b.n	8000f8a <HAL_ADC_ConvCpltCallback+0x1a2>
	}
    pid_error = current_setpoint - current_reading;
 8000e9a:	4b46      	ldr	r3, [pc, #280]	@ (8000fb4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8000e9c:	ed93 7a00 	vldr	s14, [r3]
 8000ea0:	4b43      	ldr	r3, [pc, #268]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eaa:	4b45      	ldr	r3, [pc, #276]	@ (8000fc0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000eac:	edc3 7a00 	vstr	s15, [r3]
    pid_error_integral += pid_error;
 8000eb0:	4b44      	ldr	r3, [pc, #272]	@ (8000fc4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000eb2:	ed93 7a00 	vldr	s14, [r3]
 8000eb6:	4b42      	ldr	r3, [pc, #264]	@ (8000fc0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec0:	4b40      	ldr	r3, [pc, #256]	@ (8000fc4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000ec2:	edc3 7a00 	vstr	s15, [r3]
    // clamp integral to +- 10
	if (pid_error_integral > PID_I_CLAMP) {
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000ec8:	edd3 7a00 	vldr	s15, [r3]
 8000ecc:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000fc8 <HAL_ADC_ConvCpltCallback+0x1e0>
 8000ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed8:	dd03      	ble.n	8000ee2 <HAL_ADC_ConvCpltCallback+0xfa>
		pid_error_integral = PID_I_CLAMP;
 8000eda:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000edc:	4a3b      	ldr	r2, [pc, #236]	@ (8000fcc <HAL_ADC_ConvCpltCallback+0x1e4>)
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e00c      	b.n	8000efc <HAL_ADC_ConvCpltCallback+0x114>
	} else if (pid_error_integral < -PID_I_CLAMP) {
 8000ee2:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000fd0 <HAL_ADC_ConvCpltCallback+0x1e8>
 8000eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	d502      	bpl.n	8000efc <HAL_ADC_ConvCpltCallback+0x114>
		pid_error_integral = -PID_I_CLAMP;
 8000ef6:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000ef8:	4a36      	ldr	r2, [pc, #216]	@ (8000fd4 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8000efa:	601a      	str	r2, [r3, #0]
	}
    pid_pwm_change = Kp * pid_error + Ki * pid_error_integral;
 8000efc:	4b36      	ldr	r3, [pc, #216]	@ (8000fd8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8000efe:	ed93 7a00 	vldr	s14, [r3]
 8000f02:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f0c:	4b33      	ldr	r3, [pc, #204]	@ (8000fdc <HAL_ADC_ConvCpltCallback+0x1f4>)
 8000f0e:	edd3 6a00 	vldr	s13, [r3]
 8000f12:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f20:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000f22:	edc3 7a00 	vstr	s15, [r3]
    pid_pwm_output += pid_pwm_change;
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f28:	ed93 7a00 	vldr	s14, [r3]
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe0 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8000f2e:	edd3 7a00 	vldr	s15, [r3]
 8000f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f36:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe4 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f38:	edc3 7a00 	vstr	s15, [r3]
	if (pid_pwm_output >= 0.98f) {
 8000f3c:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000fe8 <HAL_ADC_ConvCpltCallback+0x200>
 8000f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	db03      	blt.n	8000f58 <HAL_ADC_ConvCpltCallback+0x170>
		pid_pwm_output = 0.98f;
 8000f50:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f52:	4a26      	ldr	r2, [pc, #152]	@ (8000fec <HAL_ADC_ConvCpltCallback+0x204>)
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e00b      	b.n	8000f70 <HAL_ADC_ConvCpltCallback+0x188>
	} else if (pid_pwm_output < 0.0f) {
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f66:	d503      	bpl.n	8000f70 <HAL_ADC_ConvCpltCallback+0x188>
		pid_pwm_output = 0.0f;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
	}
    TIM1->CCR1 = pid_pwm_output*1600.0f;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000ff0 <HAL_ADC_ConvCpltCallback+0x208>
 8000f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_ADC_ConvCpltCallback+0x1d4>)
 8000f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f84:	ee17 2a90 	vmov	r2, s15
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	9999999a 	.word	0x9999999a
 8000f94:	40099999 	.word	0x40099999
 8000f98:	20000248 	.word	0x20000248
 8000f9c:	477fff00 	.word	0x477fff00
 8000fa0:	4050c337 	.word	0x4050c337
 8000fa4:	20000240 	.word	0x20000240
 8000fa8:	3df5c28f 	.word	0x3df5c28f
 8000fac:	3f766aba 	.word	0x3f766aba
 8000fb0:	2000023c 	.word	0x2000023c
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000244 	.word	0x20000244
 8000fbc:	40012c00 	.word	0x40012c00
 8000fc0:	20000258 	.word	0x20000258
 8000fc4:	2000025c 	.word	0x2000025c
 8000fc8:	3dcccccd 	.word	0x3dcccccd
 8000fcc:	3dcccccd 	.word	0x3dcccccd
 8000fd0:	bdcccccd 	.word	0xbdcccccd
 8000fd4:	bdcccccd 	.word	0xbdcccccd
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000260 	.word	0x20000260
 8000fe4:	20000264 	.word	0x20000264
 8000fe8:	3f7ae148 	.word	0x3f7ae148
 8000fec:	3f7ae148 	.word	0x3f7ae148
 8000ff0:	44c80000 	.word	0x44c80000

08000ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
}
 8000ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <Error_Handler+0x8>

08001000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_MspInit+0x44>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100a:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <HAL_MspInit+0x44>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6613      	str	r3, [r2, #96]	@ 0x60
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_MspInit+0x44>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <HAL_MspInit+0x44>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <HAL_MspInit+0x44>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001028:	6593      	str	r3, [r2, #88]	@ 0x58
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_MspInit+0x44>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001036:	f002 febb 	bl	8003db0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0a0      	sub	sp, #128	@ 0x80
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	2254      	movs	r2, #84	@ 0x54
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f005 fa5b 	bl	8006524 <memset>
  if(hadc->Instance==ADC1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001076:	d146      	bne.n	8001106 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001078:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800107c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800107e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001082:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fb97 	bl	80047bc <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001094:	f7ff ffae 	bl	8000ff4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001098:	4b42      	ldr	r3, [pc, #264]	@ (80011a4 <HAL_ADC_MspInit+0x15c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a41      	ldr	r2, [pc, #260]	@ (80011a4 <HAL_ADC_MspInit+0x15c>)
 80010a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80010a2:	4b40      	ldr	r3, [pc, #256]	@ (80011a4 <HAL_ADC_MspInit+0x15c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10b      	bne.n	80010c2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010aa:	4b3f      	ldr	r3, [pc, #252]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	4a3e      	ldr	r2, [pc, #248]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 80010b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b6:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a38      	ldr	r2, [pc, #224]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b36      	ldr	r3, [pc, #216]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010da:	2301      	movs	r3, #1
 80010dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010de:	2303      	movs	r3, #3
 80010e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f0:	f002 fc06 	bl	8003900 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2012      	movs	r0, #18
 80010fa:	f002 fbcc 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010fe:	2012      	movs	r0, #18
 8001100:	f002 fbe3 	bl	80038ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001104:	e04a      	b.n	800119c <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a28      	ldr	r2, [pc, #160]	@ (80011ac <HAL_ADC_MspInit+0x164>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d145      	bne.n	800119c <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001110:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001114:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001116:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800111a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fb4b 	bl	80047bc <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 800112c:	f7ff ff62 	bl	8000ff4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001130:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <HAL_ADC_MspInit+0x15c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a1b      	ldr	r2, [pc, #108]	@ (80011a4 <HAL_ADC_MspInit+0x15c>)
 8001138:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <HAL_ADC_MspInit+0x15c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d10b      	bne.n	800115a <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a18      	ldr	r2, [pc, #96]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 8001148:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_ADC_MspInit+0x160>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001172:	2310      	movs	r3, #16
 8001174:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001188:	f002 fbba 	bl	8003900 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2012      	movs	r0, #18
 8001192:	f002 fb80 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001196:	2012      	movs	r0, #18
 8001198:	f002 fb97 	bl	80038ca <HAL_NVIC_EnableIRQ>
}
 800119c:	bf00      	nop
 800119e:	3780      	adds	r7, #128	@ 0x80
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000268 	.word	0x20000268
 80011a8:	40021000 	.word	0x40021000
 80011ac:	50000100 	.word	0x50000100

080011b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <HAL_TIM_Base_MspInit+0xb0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10c      	bne.n	80011dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c2:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c6:	4a27      	ldr	r2, [pc, #156]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 80011c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ce:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80011da:	e03c      	b.n	8001256 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <HAL_TIM_Base_MspInit+0xb8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10c      	bne.n	8001200 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
}
 80011fe:	e02a      	b.n	8001256 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a19      	ldr	r2, [pc, #100]	@ (800126c <HAL_TIM_Base_MspInit+0xbc>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d10c      	bne.n	8001224 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120e:	4a15      	ldr	r2, [pc, #84]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6593      	str	r3, [r2, #88]	@ 0x58
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
}
 8001222:	e018      	b.n	8001256 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a11      	ldr	r2, [pc, #68]	@ (8001270 <HAL_TIM_Base_MspInit+0xc0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d113      	bne.n	8001256 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	4a0c      	ldr	r2, [pc, #48]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	6593      	str	r3, [r2, #88]	@ 0x58
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_TIM_Base_MspInit+0xb4>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2036      	movs	r0, #54	@ 0x36
 800124c:	f002 fb23 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001250:	2036      	movs	r0, #54	@ 0x36
 8001252:	f002 fb3a 	bl	80038ca <HAL_NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40012c00 	.word	0x40012c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40000400 	.word	0x40000400
 800126c:	40000800 	.word	0x40000800
 8001270:	40001000 	.word	0x40001000

08001274 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <HAL_TIM_MspPostInit+0x68>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d11d      	bne.n	80012d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_TIM_MspPostInit+0x6c>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <HAL_TIM_MspPostInit+0x6c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_TIM_MspPostInit+0x6c>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012c0:	2306      	movs	r3, #6
 80012c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ce:	f002 fb17 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40012c00 	.word	0x40012c00
 80012e0:	40021000 	.word	0x40021000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133a:	f000 f8a9 	bl	8001490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <ADC1_2_IRQHandler+0x14>)
 800134a:	f001 f831 	bl	80023b0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800134e:	4803      	ldr	r0, [pc, #12]	@ (800135c <ADC1_2_IRQHandler+0x18>)
 8001350:	f001 f82e 	bl	80023b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000034 	.word	0x20000034
 800135c:	200000a0 	.word	0x200000a0

08001360 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001364:	4802      	ldr	r0, [pc, #8]	@ (8001370 <TIM6_DAC_IRQHandler+0x10>)
 8001366:	f003 ff2b 	bl	80051c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200001f0 	.word	0x200001f0

08001374 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <SystemInit+0x20>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <SystemInit+0x20>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001398:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800139a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800139c:	f7ff ffea 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopForever+0xe>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopForever+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f005 f8b5 	bl	8006534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ca:	f7ff f969 	bl	80006a0 <main>

080013ce <LoopForever>:

LoopForever:
    b LoopForever
 80013ce:	e7fe      	b.n	80013ce <LoopForever>
  ldr   r0, =_estack
 80013d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80013dc:	080065ac 	.word	0x080065ac
  ldr r2, =_sbss
 80013e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80013e4:	20000270 	.word	0x20000270

080013e8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC3_IRQHandler>

080013ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f002 fa43 	bl	8003880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f80e 	bl	800141c <HAL_InitTick>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	e001      	b.n	8001410 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800140c:	f7ff fdf8 	bl	8001000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001410:	79fb      	ldrb	r3, [r7, #7]

}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001428:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_InitTick+0x68>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d022      	beq.n	8001476 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_InitTick+0x6c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <HAL_InitTick+0x68>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800143c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001440:	fbb2 f3f3 	udiv	r3, r2, r3
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fa4e 	bl	80038e6 <HAL_SYSTICK_Config>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10f      	bne.n	8001470 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	d809      	bhi.n	800146a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001456:	2200      	movs	r2, #0
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	f04f 30ff 	mov.w	r0, #4294967295
 800145e:	f002 fa1a 	bl	8003896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <HAL_InitTick+0x70>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e007      	b.n	800147a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	e004      	b.n	800147a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e001      	b.n	800147a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800147a:	7bfb      	ldrb	r3, [r7, #15]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000014 	.word	0x20000014
 8001488:	2000000c 	.word	0x2000000c
 800148c:	20000010 	.word	0x20000010

08001490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_IncTick+0x1c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_IncTick+0x20>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4413      	add	r3, r2
 800149e:	4a03      	ldr	r2, [pc, #12]	@ (80014ac <HAL_IncTick+0x1c>)
 80014a0:	6013      	str	r3, [r2, #0]
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	2000026c 	.word	0x2000026c
 80014b0:	20000014 	.word	0x20000014

080014b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	2000026c 	.word	0x2000026c

080014cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	609a      	str	r2, [r3, #8]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3360      	adds	r3, #96	@ 0x60
 8001546:	461a      	mov	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <LL_ADC_SetOffset+0x44>)
 8001556:	4013      	ands	r3, r2
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	4313      	orrs	r3, r2
 8001564:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800156c:	bf00      	nop
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	03fff000 	.word	0x03fff000

0800157c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3360      	adds	r3, #96	@ 0x60
 800158a:	461a      	mov	r2, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3360      	adds	r3, #96	@ 0x60
 80015b8:	461a      	mov	r2, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015de:	b480      	push	{r7}
 80015e0:	b087      	sub	sp, #28
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3360      	adds	r3, #96	@ 0x60
 80015ee:	461a      	mov	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	431a      	orrs	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001608:	bf00      	nop
 800160a:	371c      	adds	r7, #28
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3360      	adds	r3, #96	@ 0x60
 8001624:	461a      	mov	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	431a      	orrs	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800163e:	bf00      	nop
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	615a      	str	r2, [r3, #20]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001696:	b480      	push	{r7}
 8001698:	b087      	sub	sp, #28
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3330      	adds	r3, #48	@ 0x30
 80016a6:	461a      	mov	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	4413      	add	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	211f      	movs	r1, #31
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	401a      	ands	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0e9b      	lsrs	r3, r3, #26
 80016ce:	f003 011f 	and.w	r1, r3, #31
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	431a      	orrs	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3314      	adds	r3, #20
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	0e5b      	lsrs	r3, r3, #25
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	0d1b      	lsrs	r3, r3, #20
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	2107      	movs	r1, #7
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	401a      	ands	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	0d1b      	lsrs	r3, r3, #20
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001784:	43db      	mvns	r3, r3
 8001786:	401a      	ands	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0318 	and.w	r3, r3, #24
 800178e:	4908      	ldr	r1, [pc, #32]	@ (80017b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001790:	40d9      	lsrs	r1, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	400b      	ands	r3, r1
 8001796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179a:	431a      	orrs	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	0007ffff 	.word	0x0007ffff

080017b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 031f 	and.w	r3, r3, #31
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80017fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6093      	str	r3, [r2, #8]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001824:	d101      	bne.n	800182a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001848:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800184c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001874:	d101      	bne.n	800187a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001898:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018c4:	f043 0202 	orr.w	r2, r3, #2
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <LL_ADC_IsEnabled+0x18>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <LL_ADC_IsEnabled+0x1a>
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d101      	bne.n	8001916 <LL_ADC_IsDisableOngoing+0x18>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_ADC_IsDisableOngoing+0x1a>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001934:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001938:	f043 0204 	orr.w	r2, r3, #4
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b04      	cmp	r3, #4
 800195e:	d101      	bne.n	8001964 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b08      	cmp	r3, #8
 8001984:	d101      	bne.n	800198a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1a9      	b.n	8001d06 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fb41 	bl	8001048 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff19 	bl	8001810 <LL_ADC_IsDeepPowerDownEnabled>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff feff 	bl	80017ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff34 	bl	8001860 <LL_ADC_IsInternalRegulatorEnabled>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d115      	bne.n	8001a2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff18 	bl	8001838 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a08:	4b9c      	ldr	r3, [pc, #624]	@ (8001c7c <HAL_ADC_Init+0x2e4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	4a9c      	ldr	r2, [pc, #624]	@ (8001c80 <HAL_ADC_Init+0x2e8>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	3301      	adds	r3, #1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff16 	bl	8001860 <LL_ADC_IsInternalRegulatorEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10d      	bne.n	8001a56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff76 	bl	800194c <LL_ADC_REG_IsConversionOngoing>
 8001a60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 8142 	bne.w	8001cf4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 813e 	bne.w	8001cf4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a80:	f043 0202 	orr.w	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff23 	bl	80018d8 <LL_ADC_IsEnabled>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d141      	bne.n	8001b1c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aa0:	d004      	beq.n	8001aac <HAL_ADC_Init+0x114>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a77      	ldr	r2, [pc, #476]	@ (8001c84 <HAL_ADC_Init+0x2ec>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d10f      	bne.n	8001acc <HAL_ADC_Init+0x134>
 8001aac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ab0:	f7ff ff12 	bl	80018d8 <LL_ADC_IsEnabled>
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	4873      	ldr	r0, [pc, #460]	@ (8001c84 <HAL_ADC_Init+0x2ec>)
 8001ab8:	f7ff ff0e 	bl	80018d8 <LL_ADC_IsEnabled>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4323      	orrs	r3, r4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	e012      	b.n	8001af2 <HAL_ADC_Init+0x15a>
 8001acc:	486e      	ldr	r0, [pc, #440]	@ (8001c88 <HAL_ADC_Init+0x2f0>)
 8001ace:	f7ff ff03 	bl	80018d8 <LL_ADC_IsEnabled>
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	486d      	ldr	r0, [pc, #436]	@ (8001c8c <HAL_ADC_Init+0x2f4>)
 8001ad6:	f7ff feff 	bl	80018d8 <LL_ADC_IsEnabled>
 8001ada:	4603      	mov	r3, r0
 8001adc:	431c      	orrs	r4, r3
 8001ade:	486c      	ldr	r0, [pc, #432]	@ (8001c90 <HAL_ADC_Init+0x2f8>)
 8001ae0:	f7ff fefa 	bl	80018d8 <LL_ADC_IsEnabled>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d012      	beq.n	8001b1c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001afe:	d004      	beq.n	8001b0a <HAL_ADC_Init+0x172>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a5f      	ldr	r2, [pc, #380]	@ (8001c84 <HAL_ADC_Init+0x2ec>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_Init+0x176>
 8001b0a:	4a62      	ldr	r2, [pc, #392]	@ (8001c94 <HAL_ADC_Init+0x2fc>)
 8001b0c:	e000      	b.n	8001b10 <HAL_ADC_Init+0x178>
 8001b0e:	4a62      	ldr	r2, [pc, #392]	@ (8001c98 <HAL_ADC_Init+0x300>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f7ff fcd8 	bl	80014cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7f5b      	ldrb	r3, [r3, #29]
 8001b20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d106      	bne.n	8001b58 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	045b      	lsls	r3, r3, #17
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b64:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b48      	ldr	r3, [pc, #288]	@ (8001c9c <HAL_ADC_Init+0x304>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fee5 	bl	8001972 <LL_ADC_INJ_IsConversionOngoing>
 8001ba8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d17f      	bne.n	8001cb0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d17c      	bne.n	8001cb0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bc2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bd2:	f023 0302 	bic.w	r3, r3, #2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d017      	beq.n	8001c18 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001bf6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c00:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6911      	ldr	r1, [r2, #16]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c16:	e013      	b.n	8001c40 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c3c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d12a      	bne.n	8001ca0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c60:	4311      	orrs	r1, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	e019      	b.n	8001cb0 <HAL_ADC_Init+0x318>
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	053e2d63 	.word	0x053e2d63
 8001c84:	50000100 	.word	0x50000100
 8001c88:	50000400 	.word	0x50000400
 8001c8c:	50000500 	.word	0x50000500
 8001c90:	50000600 	.word	0x50000600
 8001c94:	50000300 	.word	0x50000300
 8001c98:	50000700 	.word	0x50000700
 8001c9c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f023 010f 	bic.w	r1, r3, #15
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	1e5a      	subs	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cd0:	e007      	b.n	8001ce2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 020f 	bic.w	r2, r2, #15
 8001ce0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cf2:	e007      	b.n	8001d04 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf8:	f043 0210 	orr.w	r2, r3, #16
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	@ 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	bf00      	nop

08001d10 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d20:	d004      	beq.n	8001d2c <HAL_ADC_Start+0x1c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a67      	ldr	r2, [pc, #412]	@ (8001ec4 <HAL_ADC_Start+0x1b4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_Start+0x20>
 8001d2c:	4b66      	ldr	r3, [pc, #408]	@ (8001ec8 <HAL_ADC_Start+0x1b8>)
 8001d2e:	e000      	b.n	8001d32 <HAL_ADC_Start+0x22>
 8001d30:	4b66      	ldr	r3, [pc, #408]	@ (8001ecc <HAL_ADC_Start+0x1bc>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fd3e 	bl	80017b4 <LL_ADC_GetMultimode>
 8001d38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fe04 	bl	800194c <LL_ADC_REG_IsConversionOngoing>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 80b4 	bne.w	8001eb4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_Start+0x4a>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e0af      	b.n	8001eba <HAL_ADC_Start+0x1aa>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f001 f9d8 	bl	8003118 <ADC_Enable>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 809b 	bne.w	8001eaa <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec4 <HAL_ADC_Start+0x1b4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_ADC_Start+0x96>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed0 <HAL_ADC_Start+0x1c0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d002      	beq.n	8001da2 <HAL_ADC_Start+0x92>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	e003      	b.n	8001daa <HAL_ADC_Start+0x9a>
 8001da2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed4 <HAL_ADC_Start+0x1c4>)
 8001da4:	e001      	b.n	8001daa <HAL_ADC_Start+0x9a>
 8001da6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d002      	beq.n	8001db8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dd0:	d106      	bne.n	8001de0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd6:	f023 0206 	bic.w	r2, r3, #6
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	661a      	str	r2, [r3, #96]	@ 0x60
 8001dde:	e002      	b.n	8001de6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	221c      	movs	r2, #28
 8001dec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a32      	ldr	r2, [pc, #200]	@ (8001ec4 <HAL_ADC_Start+0x1b4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d009      	beq.n	8001e14 <HAL_ADC_Start+0x104>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a32      	ldr	r2, [pc, #200]	@ (8001ed0 <HAL_ADC_Start+0x1c0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d002      	beq.n	8001e10 <HAL_ADC_Start+0x100>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	e003      	b.n	8001e18 <HAL_ADC_Start+0x108>
 8001e10:	4b30      	ldr	r3, [pc, #192]	@ (8001ed4 <HAL_ADC_Start+0x1c4>)
 8001e12:	e001      	b.n	8001e18 <HAL_ADC_Start+0x108>
 8001e14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d008      	beq.n	8001e32 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d002      	beq.n	8001e32 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	d114      	bne.n	8001e5c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fd65 	bl	8001924 <LL_ADC_REG_StartConversion>
 8001e5a:	e02d      	b.n	8001eb8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a15      	ldr	r2, [pc, #84]	@ (8001ec4 <HAL_ADC_Start+0x1b4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d009      	beq.n	8001e86 <HAL_ADC_Start+0x176>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a16      	ldr	r2, [pc, #88]	@ (8001ed0 <HAL_ADC_Start+0x1c0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d002      	beq.n	8001e82 <HAL_ADC_Start+0x172>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	e003      	b.n	8001e8a <HAL_ADC_Start+0x17a>
 8001e82:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <HAL_ADC_Start+0x1c4>)
 8001e84:	e001      	b.n	8001e8a <HAL_ADC_Start+0x17a>
 8001e86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e8a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00f      	beq.n	8001eb8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ea0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ea8:	e006      	b.n	8001eb8 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001eb2:	e001      	b.n	8001eb8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	50000100 	.word	0x50000100
 8001ec8:	50000300 	.word	0x50000300
 8001ecc:	50000700 	.word	0x50000700
 8001ed0:	50000500 	.word	0x50000500
 8001ed4:	50000400 	.word	0x50000400

08001ed8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eea:	d004      	beq.n	8001ef6 <HAL_ADC_PollForConversion+0x1e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a77      	ldr	r2, [pc, #476]	@ (80020d0 <HAL_ADC_PollForConversion+0x1f8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_PollForConversion+0x22>
 8001ef6:	4b77      	ldr	r3, [pc, #476]	@ (80020d4 <HAL_ADC_PollForConversion+0x1fc>)
 8001ef8:	e000      	b.n	8001efc <HAL_ADC_PollForConversion+0x24>
 8001efa:	4b77      	ldr	r3, [pc, #476]	@ (80020d8 <HAL_ADC_PollForConversion+0x200>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fc59 	bl	80017b4 <LL_ADC_GetMultimode>
 8001f02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d102      	bne.n	8001f12 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	e037      	b.n	8001f82 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d002      	beq.n	8001f24 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	d111      	bne.n	8001f48 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f36:	f043 0220 	orr.w	r2, r3, #32
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0c1      	b.n	80020c6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f42:	2304      	movs	r3, #4
 8001f44:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f46:	e01c      	b.n	8001f82 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f50:	d004      	beq.n	8001f5c <HAL_ADC_PollForConversion+0x84>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a5e      	ldr	r2, [pc, #376]	@ (80020d0 <HAL_ADC_PollForConversion+0x1f8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_PollForConversion+0x88>
 8001f5c:	4b5d      	ldr	r3, [pc, #372]	@ (80020d4 <HAL_ADC_PollForConversion+0x1fc>)
 8001f5e:	e000      	b.n	8001f62 <HAL_ADC_PollForConversion+0x8a>
 8001f60:	4b5d      	ldr	r3, [pc, #372]	@ (80020d8 <HAL_ADC_PollForConversion+0x200>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fc34 	bl	80017d0 <LL_ADC_GetMultiDMATransfer>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f72:	f043 0220 	orr.w	r2, r3, #32
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0a3      	b.n	80020c6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f7e:	2304      	movs	r3, #4
 8001f80:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f82:	f7ff fa97 	bl	80014b4 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f88:	e021      	b.n	8001fce <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d01d      	beq.n	8001fce <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f92:	f7ff fa8f 	bl	80014b4 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d302      	bcc.n	8001fa8 <HAL_ADC_PollForConversion+0xd0>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d112      	bne.n	8001fce <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	f043 0204 	orr.w	r2, r3, #4
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e07b      	b.n	80020c6 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0d6      	beq.n	8001f8a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fb3f 	bl	8001670 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01c      	beq.n	8002032 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7f5b      	ldrb	r3, [r3, #29]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d118      	bne.n	8002032 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b08      	cmp	r3, #8
 800200c:	d111      	bne.n	8002032 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a26      	ldr	r2, [pc, #152]	@ (80020d0 <HAL_ADC_PollForConversion+0x1f8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d009      	beq.n	8002050 <HAL_ADC_PollForConversion+0x178>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a26      	ldr	r2, [pc, #152]	@ (80020dc <HAL_ADC_PollForConversion+0x204>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d002      	beq.n	800204c <HAL_ADC_PollForConversion+0x174>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	e003      	b.n	8002054 <HAL_ADC_PollForConversion+0x17c>
 800204c:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <HAL_ADC_PollForConversion+0x208>)
 800204e:	e001      	b.n	8002054 <HAL_ADC_PollForConversion+0x17c>
 8002050:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4293      	cmp	r3, r2
 800205a:	d008      	beq.n	800206e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d002      	beq.n	800206e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b09      	cmp	r3, #9
 800206c:	d104      	bne.n	8002078 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	e014      	b.n	80020a2 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a14      	ldr	r2, [pc, #80]	@ (80020d0 <HAL_ADC_PollForConversion+0x1f8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d009      	beq.n	8002096 <HAL_ADC_PollForConversion+0x1be>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <HAL_ADC_PollForConversion+0x204>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d002      	beq.n	8002092 <HAL_ADC_PollForConversion+0x1ba>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	e003      	b.n	800209a <HAL_ADC_PollForConversion+0x1c2>
 8002092:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <HAL_ADC_PollForConversion+0x208>)
 8002094:	e001      	b.n	800209a <HAL_ADC_PollForConversion+0x1c2>
 8002096:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800209a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d104      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2208      	movs	r2, #8
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e008      	b.n	80020c4 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	220c      	movs	r2, #12
 80020c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3720      	adds	r7, #32
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	50000100 	.word	0x50000100
 80020d4:	50000300 	.word	0x50000300
 80020d8:	50000700 	.word	0x50000700
 80020dc:	50000500 	.word	0x50000500
 80020e0:	50000400 	.word	0x50000400

080020e4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020f4:	d004      	beq.n	8002100 <HAL_ADC_Start_IT+0x1c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a92      	ldr	r2, [pc, #584]	@ (8002344 <HAL_ADC_Start_IT+0x260>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_Start_IT+0x20>
 8002100:	4b91      	ldr	r3, [pc, #580]	@ (8002348 <HAL_ADC_Start_IT+0x264>)
 8002102:	e000      	b.n	8002106 <HAL_ADC_Start_IT+0x22>
 8002104:	4b91      	ldr	r3, [pc, #580]	@ (800234c <HAL_ADC_Start_IT+0x268>)
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fb54 	bl	80017b4 <LL_ADC_GetMultimode>
 800210c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fc1a 	bl	800194c <LL_ADC_REG_IsConversionOngoing>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 8132 	bne.w	8002384 <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_ADC_Start_IT+0x4a>
 800212a:	2302      	movs	r3, #2
 800212c:	e12d      	b.n	800238a <HAL_ADC_Start_IT+0x2a6>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 ffee 	bl	8003118 <ADC_Enable>
 800213c:	4603      	mov	r3, r0
 800213e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 8119 	bne.w	800237a <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a78      	ldr	r2, [pc, #480]	@ (8002344 <HAL_ADC_Start_IT+0x260>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d009      	beq.n	800217a <HAL_ADC_Start_IT+0x96>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a79      	ldr	r2, [pc, #484]	@ (8002350 <HAL_ADC_Start_IT+0x26c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d002      	beq.n	8002176 <HAL_ADC_Start_IT+0x92>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	e003      	b.n	800217e <HAL_ADC_Start_IT+0x9a>
 8002176:	4b77      	ldr	r3, [pc, #476]	@ (8002354 <HAL_ADC_Start_IT+0x270>)
 8002178:	e001      	b.n	800217e <HAL_ADC_Start_IT+0x9a>
 800217a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	4293      	cmp	r3, r2
 8002184:	d002      	beq.n	800218c <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002190:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a8:	f023 0206 	bic.w	r2, r3, #6
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	661a      	str	r2, [r3, #96]	@ 0x60
 80021b0:	e002      	b.n	80021b8 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	221c      	movs	r2, #28
 80021be:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 021c 	bic.w	r2, r2, #28
 80021d6:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d108      	bne.n	80021f2 <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0208 	orr.w	r2, r2, #8
 80021ee:	605a      	str	r2, [r3, #4]
          break;
 80021f0:	e008      	b.n	8002204 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0204 	orr.w	r2, r2, #4
 8002200:	605a      	str	r2, [r3, #4]
          break;
 8002202:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d107      	bne.n	800221c <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0210 	orr.w	r2, r2, #16
 800221a:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a48      	ldr	r2, [pc, #288]	@ (8002344 <HAL_ADC_Start_IT+0x260>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d009      	beq.n	800223a <HAL_ADC_Start_IT+0x156>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a49      	ldr	r2, [pc, #292]	@ (8002350 <HAL_ADC_Start_IT+0x26c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d002      	beq.n	8002236 <HAL_ADC_Start_IT+0x152>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	e003      	b.n	800223e <HAL_ADC_Start_IT+0x15a>
 8002236:	4b47      	ldr	r3, [pc, #284]	@ (8002354 <HAL_ADC_Start_IT+0x270>)
 8002238:	e001      	b.n	800223e <HAL_ADC_Start_IT+0x15a>
 800223a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	4293      	cmp	r3, r2
 8002244:	d008      	beq.n	8002258 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b05      	cmp	r3, #5
 8002250:	d002      	beq.n	8002258 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b09      	cmp	r3, #9
 8002256:	d13a      	bne.n	80022ce <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d02d      	beq.n	80022c2 <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800226e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b08      	cmp	r3, #8
 800227c:	d110      	bne.n	80022a0 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0220 	bic.w	r2, r2, #32
 800228c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800229c:	605a      	str	r2, [r3, #4]
              break;
 800229e:	e010      	b.n	80022c2 <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ae:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0220 	orr.w	r2, r2, #32
 80022be:	605a      	str	r2, [r3, #4]
              break;
 80022c0:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fb2c 	bl	8001924 <LL_ADC_REG_StartConversion>
 80022cc:	e05c      	b.n	8002388 <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a19      	ldr	r2, [pc, #100]	@ (8002344 <HAL_ADC_Start_IT+0x260>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d009      	beq.n	80022f8 <HAL_ADC_Start_IT+0x214>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a19      	ldr	r2, [pc, #100]	@ (8002350 <HAL_ADC_Start_IT+0x26c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d002      	beq.n	80022f4 <HAL_ADC_Start_IT+0x210>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	e003      	b.n	80022fc <HAL_ADC_Start_IT+0x218>
 80022f4:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <HAL_ADC_Start_IT+0x270>)
 80022f6:	e001      	b.n	80022fc <HAL_ADC_Start_IT+0x218>
 80022f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022fc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d03e      	beq.n	8002388 <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002312:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d11a      	bne.n	8002358 <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0220 	bic.w	r2, r2, #32
 8002330:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002340:	605a      	str	r2, [r3, #4]
              break;
 8002342:	e021      	b.n	8002388 <HAL_ADC_Start_IT+0x2a4>
 8002344:	50000100 	.word	0x50000100
 8002348:	50000300 	.word	0x50000300
 800234c:	50000700 	.word	0x50000700
 8002350:	50000500 	.word	0x50000500
 8002354:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002366:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0220 	orr.w	r2, r2, #32
 8002376:	605a      	str	r2, [r3, #4]
              break;
 8002378:	e006      	b.n	8002388 <HAL_ADC_Start_IT+0x2a4>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002382:	e001      	b.n	8002388 <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002384:	2302      	movs	r3, #2
 8002386:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002388:	7dfb      	ldrb	r3, [r7, #23]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop

08002394 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	@ 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023d4:	d004      	beq.n	80023e0 <HAL_ADC_IRQHandler+0x30>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a8e      	ldr	r2, [pc, #568]	@ (8002614 <HAL_ADC_IRQHandler+0x264>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_IRQHandler+0x34>
 80023e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002618 <HAL_ADC_IRQHandler+0x268>)
 80023e2:	e000      	b.n	80023e6 <HAL_ADC_IRQHandler+0x36>
 80023e4:	4b8d      	ldr	r3, [pc, #564]	@ (800261c <HAL_ADC_IRQHandler+0x26c>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff f9e4 	bl	80017b4 <LL_ADC_GetMultimode>
 80023ec:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d017      	beq.n	8002428 <HAL_ADC_IRQHandler+0x78>
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d012      	beq.n	8002428 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f001 f84e 	bl	80034bc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2202      	movs	r2, #2
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <HAL_ADC_IRQHandler+0x8c>
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10b      	bne.n	8002454 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8094 	beq.w	8002570 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 808e 	beq.w	8002570 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002464:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff f8fd 	bl	8001670 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d072      	beq.n	8002562 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a64      	ldr	r2, [pc, #400]	@ (8002614 <HAL_ADC_IRQHandler+0x264>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_ADC_IRQHandler+0xea>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a65      	ldr	r2, [pc, #404]	@ (8002620 <HAL_ADC_IRQHandler+0x270>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d002      	beq.n	8002496 <HAL_ADC_IRQHandler+0xe6>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	e003      	b.n	800249e <HAL_ADC_IRQHandler+0xee>
 8002496:	4b63      	ldr	r3, [pc, #396]	@ (8002624 <HAL_ADC_IRQHandler+0x274>)
 8002498:	e001      	b.n	800249e <HAL_ADC_IRQHandler+0xee>
 800249a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d008      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	d002      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d104      	bne.n	80024c2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	e014      	b.n	80024ec <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a53      	ldr	r2, [pc, #332]	@ (8002614 <HAL_ADC_IRQHandler+0x264>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x130>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a53      	ldr	r2, [pc, #332]	@ (8002620 <HAL_ADC_IRQHandler+0x270>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d002      	beq.n	80024dc <HAL_ADC_IRQHandler+0x12c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	e003      	b.n	80024e4 <HAL_ADC_IRQHandler+0x134>
 80024dc:	4b51      	ldr	r3, [pc, #324]	@ (8002624 <HAL_ADC_IRQHandler+0x274>)
 80024de:	e001      	b.n	80024e4 <HAL_ADC_IRQHandler+0x134>
 80024e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024e4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d135      	bne.n	8002562 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b08      	cmp	r3, #8
 8002502:	d12e      	bne.n	8002562 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fa1f 	bl	800194c <LL_ADC_REG_IsConversionOngoing>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11a      	bne.n	800254a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 020c 	bic.w	r2, r2, #12
 8002522:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002528:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d112      	bne.n	8002562 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002548:	e00b      	b.n	8002562 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254e:	f043 0210 	orr.w	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255a:	f043 0201 	orr.w	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fc40 	bl	8000de8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	220c      	movs	r2, #12
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d004      	beq.n	8002584 <HAL_ADC_IRQHandler+0x1d4>
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10b      	bne.n	800259c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80b3 	beq.w	80026f6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80ad 	beq.w	80026f6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff f898 	bl	80016ee <LL_ADC_INJ_IsTriggerSourceSWStart>
 80025be:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f853 	bl	8001670 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025ca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a10      	ldr	r2, [pc, #64]	@ (8002614 <HAL_ADC_IRQHandler+0x264>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_ADC_IRQHandler+0x23a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a11      	ldr	r2, [pc, #68]	@ (8002620 <HAL_ADC_IRQHandler+0x270>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d002      	beq.n	80025e6 <HAL_ADC_IRQHandler+0x236>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	e003      	b.n	80025ee <HAL_ADC_IRQHandler+0x23e>
 80025e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <HAL_ADC_IRQHandler+0x274>)
 80025e8:	e001      	b.n	80025ee <HAL_ADC_IRQHandler+0x23e>
 80025ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d008      	beq.n	8002608 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d002      	beq.n	8002608 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b07      	cmp	r3, #7
 8002606:	d10f      	bne.n	8002628 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	623b      	str	r3, [r7, #32]
 8002610:	e01f      	b.n	8002652 <HAL_ADC_IRQHandler+0x2a2>
 8002612:	bf00      	nop
 8002614:	50000100 	.word	0x50000100
 8002618:	50000300 	.word	0x50000300
 800261c:	50000700 	.word	0x50000700
 8002620:	50000500 	.word	0x50000500
 8002624:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a8b      	ldr	r2, [pc, #556]	@ (800285c <HAL_ADC_IRQHandler+0x4ac>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_ADC_IRQHandler+0x296>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a8a      	ldr	r2, [pc, #552]	@ (8002860 <HAL_ADC_IRQHandler+0x4b0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d002      	beq.n	8002642 <HAL_ADC_IRQHandler+0x292>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	e003      	b.n	800264a <HAL_ADC_IRQHandler+0x29a>
 8002642:	4b88      	ldr	r3, [pc, #544]	@ (8002864 <HAL_ADC_IRQHandler+0x4b4>)
 8002644:	e001      	b.n	800264a <HAL_ADC_IRQHandler+0x29a>
 8002646:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800264a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d047      	beq.n	80026e8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <HAL_ADC_IRQHandler+0x2c2>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d03f      	beq.n	80026e8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800266e:	2b00      	cmp	r3, #0
 8002670:	d13a      	bne.n	80026e8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267c:	2b40      	cmp	r3, #64	@ 0x40
 800267e:	d133      	bne.n	80026e8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d12e      	bne.n	80026e8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f96f 	bl	8001972 <LL_ADC_INJ_IsConversionOngoing>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d11a      	bne.n	80026d0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80026a8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d112      	bne.n	80026e8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026ce:	e00b      	b.n	80026e8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	f043 0210 	orr.w	r2, r3, #16
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 febf 	bl	800346c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2260      	movs	r2, #96	@ 0x60
 80026f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d011      	beq.n	8002724 <HAL_ADC_IRQHandler+0x374>
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8aa 	bl	8002870 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2280      	movs	r2, #128	@ 0x80
 8002722:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d012      	beq.n	8002754 <HAL_ADC_IRQHandler+0x3a4>
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00d      	beq.n	8002754 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fea5 	bl	8003494 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002752:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <HAL_ADC_IRQHandler+0x3d4>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fe97 	bl	80034a8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002782:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	d043      	beq.n	8002816 <HAL_ADC_IRQHandler+0x466>
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d03e      	beq.n	8002816 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80027a0:	2301      	movs	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027a4:	e021      	b.n	80027ea <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027b4:	d004      	beq.n	80027c0 <HAL_ADC_IRQHandler+0x410>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a28      	ldr	r2, [pc, #160]	@ (800285c <HAL_ADC_IRQHandler+0x4ac>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_IRQHandler+0x414>
 80027c0:	4b29      	ldr	r3, [pc, #164]	@ (8002868 <HAL_ADC_IRQHandler+0x4b8>)
 80027c2:	e000      	b.n	80027c6 <HAL_ADC_IRQHandler+0x416>
 80027c4:	4b29      	ldr	r3, [pc, #164]	@ (800286c <HAL_ADC_IRQHandler+0x4bc>)
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f802 	bl	80017d0 <LL_ADC_GetMultiDMATransfer>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80027d2:	2301      	movs	r3, #1
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d6:	e008      	b.n	80027ea <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80027e6:	2301      	movs	r3, #1
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10e      	bne.n	800280e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002800:	f043 0202 	orr.w	r2, r3, #2
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f83b 	bl	8002884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2210      	movs	r2, #16
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d018      	beq.n	8002852 <HAL_ADC_IRQHandler+0x4a2>
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	2b00      	cmp	r3, #0
 8002828:	d013      	beq.n	8002852 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283a:	f043 0208 	orr.w	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800284a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fe17 	bl	8003480 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002852:	bf00      	nop
 8002854:	3728      	adds	r7, #40	@ 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	50000100 	.word	0x50000100
 8002860:	50000500 	.word	0x50000500
 8002864:	50000400 	.word	0x50000400
 8002868:	50000300 	.word	0x50000300
 800286c:	50000700 	.word	0x50000700

08002870 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b0b6      	sub	sp, #216	@ 0xd8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x24>
 80028b6:	2302      	movs	r3, #2
 80028b8:	f000 bc13 	b.w	80030e2 <HAL_ADC_ConfigChannel+0x84a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff f83f 	bl	800194c <LL_ADC_REG_IsConversionOngoing>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 83f3 	bne.w	80030bc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f7fe fed7 	bl	8001696 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff f82d 	bl	800194c <LL_ADC_REG_IsConversionOngoing>
 80028f2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f839 	bl	8001972 <LL_ADC_INJ_IsConversionOngoing>
 8002900:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002904:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 81d9 	bne.w	8002cc0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800290e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 81d4 	bne.w	8002cc0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002920:	d10f      	bne.n	8002942 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	4619      	mov	r1, r3
 800292e:	f7fe fef1 	bl	8001714 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fe85 	bl	800164a <LL_ADC_SetSamplingTimeCommonConfig>
 8002940:	e00e      	b.n	8002960 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	461a      	mov	r2, r3
 8002950:	f7fe fee0 	bl	8001714 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fe75 	bl	800164a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	08db      	lsrs	r3, r3, #3
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b04      	cmp	r3, #4
 8002980:	d022      	beq.n	80029c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6919      	ldr	r1, [r3, #16]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002992:	f7fe fdcf 	bl	8001534 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6919      	ldr	r1, [r3, #16]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7fe fe1b 	bl	80015de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HAL_ADC_ConfigChannel+0x126>
 80029b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029bc:	e000      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x128>
 80029be:	2300      	movs	r3, #0
 80029c0:	461a      	mov	r2, r3
 80029c2:	f7fe fe27 	bl	8001614 <LL_ADC_SetOffsetSaturation>
 80029c6:	e17b      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fdd4 	bl	800157c <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x15c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fdc9 	bl	800157c <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	0e9b      	lsrs	r3, r3, #26
 80029ee:	f003 021f 	and.w	r2, r3, #31
 80029f2:	e01e      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x19a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fdbe 	bl	800157c <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e004      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x1b2>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	0e9b      	lsrs	r3, r3, #26
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	e018      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x1e4>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002a66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e004      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe fd8d 	bl	80015a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2101      	movs	r1, #1
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe fd71 	bl	800157c <LL_ADC_GetOffsetChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x222>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fd66 	bl	800157c <LL_ADC_GetOffsetChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	e01e      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x260>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fd5b 	bl	800157c <LL_ADC_GetOffsetChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ad8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e004      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x278>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	e018      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x2aa>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002b24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e004      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d106      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fd2a 	bl	80015a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2102      	movs	r1, #2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fd0e 	bl	800157c <LL_ADC_GetOffsetChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x2e8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2102      	movs	r1, #2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe fd03 	bl	800157c <LL_ADC_GetOffsetChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	f003 021f 	and.w	r2, r3, #31
 8002b7e:	e01e      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x326>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2102      	movs	r1, #2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fcf8 	bl	800157c <LL_ADC_GetOffsetChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ba2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e004      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x33e>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	e016      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x36c>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002be8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	e004      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d106      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2102      	movs	r1, #2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fcc9 	bl	80015a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe fcad 	bl	800157c <LL_ADC_GetOffsetChannel>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x3aa>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2103      	movs	r1, #3
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fca2 	bl	800157c <LL_ADC_GetOffsetChannel>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	e017      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x3da>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2103      	movs	r1, #3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fc97 	bl	800157c <LL_ADC_GetOffsetChannel>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002c5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002c68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x3f2>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0e9b      	lsrs	r3, r3, #26
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	e011      	b.n	8002cae <HAL_ADC_ConfigChannel+0x416>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d106      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2103      	movs	r1, #3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fc74 	bl	80015a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fe07 	bl	80018d8 <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f040 813d 	bne.w	8002f4c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f7fe fd44 	bl	800176c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4aa2      	ldr	r2, [pc, #648]	@ (8002f74 <HAL_ADC_ConfigChannel+0x6dc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	f040 812e 	bne.w	8002f4c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x480>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	3301      	adds	r3, #1
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2b09      	cmp	r3, #9
 8002d0e:	bf94      	ite	ls
 8002d10:	2301      	movls	r3, #1
 8002d12:	2300      	movhi	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e019      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x4b4>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002d26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d30:	2320      	movs	r3, #32
 8002d32:	e003      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	2b09      	cmp	r3, #9
 8002d44:	bf94      	ite	ls
 8002d46:	2301      	movls	r3, #1
 8002d48:	2300      	movhi	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d079      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x4d4>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	0e9b      	lsrs	r3, r3, #26
 8002d62:	3301      	adds	r3, #1
 8002d64:	069b      	lsls	r3, r3, #26
 8002d66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d6a:	e015      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x500>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e003      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	069b      	lsls	r3, r3, #26
 8002d94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x520>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	3301      	adds	r3, #1
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	e017      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x550>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	e003      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	ea42 0103 	orr.w	r1, r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x576>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	051b      	lsls	r3, r3, #20
 8002e0c:	e018      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x5a8>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e003      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e40:	430b      	orrs	r3, r1
 8002e42:	e07e      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x5c8>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	3301      	adds	r3, #1
 8002e58:	069b      	lsls	r3, r3, #26
 8002e5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5e:	e015      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x5f4>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e70:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e003      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x614>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	e017      	b.n	8002edc <HAL_ADC_ConfigChannel+0x644>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	61fb      	str	r3, [r7, #28]
  return result;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	e003      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	ea42 0103 	orr.w	r1, r2, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10d      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x670>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f003 021f 	and.w	r2, r3, #31
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	3b1e      	subs	r3, #30
 8002f00:	051b      	lsls	r3, r3, #20
 8002f02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	e01b      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x6a8>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	613b      	str	r3, [r7, #16]
  return result;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e003      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f003 021f 	and.w	r2, r3, #31
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	3b1e      	subs	r3, #30
 8002f3a:	051b      	lsls	r3, r3, #20
 8002f3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f46:	4619      	mov	r1, r3
 8002f48:	f7fe fbe4 	bl	8001714 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <HAL_ADC_ConfigChannel+0x6e0>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80be 	beq.w	80030d6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f62:	d004      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x6d6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a04      	ldr	r2, [pc, #16]	@ (8002f7c <HAL_ADC_ConfigChannel+0x6e4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10a      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x6ec>
 8002f6e:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <HAL_ADC_ConfigChannel+0x6e8>)
 8002f70:	e009      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x6ee>
 8002f72:	bf00      	nop
 8002f74:	407f0000 	.word	0x407f0000
 8002f78:	80080000 	.word	0x80080000
 8002f7c:	50000100 	.word	0x50000100
 8002f80:	50000300 	.word	0x50000300
 8002f84:	4b59      	ldr	r3, [pc, #356]	@ (80030ec <HAL_ADC_ConfigChannel+0x854>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fac6 	bl	8001518 <LL_ADC_GetCommonPathInternalCh>
 8002f8c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a56      	ldr	r2, [pc, #344]	@ (80030f0 <HAL_ADC_ConfigChannel+0x858>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_ADC_ConfigChannel+0x70c>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a55      	ldr	r2, [pc, #340]	@ (80030f4 <HAL_ADC_ConfigChannel+0x85c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d13a      	bne.n	800301a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d134      	bne.n	800301a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fb8:	d005      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x72e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80030f8 <HAL_ADC_ConfigChannel+0x860>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	f040 8085 	bne.w	80030d0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fce:	d004      	beq.n	8002fda <HAL_ADC_ConfigChannel+0x742>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a49      	ldr	r2, [pc, #292]	@ (80030fc <HAL_ADC_ConfigChannel+0x864>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x746>
 8002fda:	4a49      	ldr	r2, [pc, #292]	@ (8003100 <HAL_ADC_ConfigChannel+0x868>)
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x748>
 8002fde:	4a43      	ldr	r2, [pc, #268]	@ (80030ec <HAL_ADC_ConfigChannel+0x854>)
 8002fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fe4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f7fe fa81 	bl	80014f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff0:	4b44      	ldr	r3, [pc, #272]	@ (8003104 <HAL_ADC_ConfigChannel+0x86c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	4a44      	ldr	r2, [pc, #272]	@ (8003108 <HAL_ADC_ConfigChannel+0x870>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800300a:	e002      	b.n	8003012 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3b01      	subs	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003018:	e05a      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3b      	ldr	r2, [pc, #236]	@ (800310c <HAL_ADC_ConfigChannel+0x874>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d125      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11f      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a31      	ldr	r2, [pc, #196]	@ (80030fc <HAL_ADC_ConfigChannel+0x864>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d104      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x7ac>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a34      	ldr	r2, [pc, #208]	@ (8003110 <HAL_ADC_ConfigChannel+0x878>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d047      	beq.n	80030d4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800304c:	d004      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x7c0>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2a      	ldr	r2, [pc, #168]	@ (80030fc <HAL_ADC_ConfigChannel+0x864>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_ADC_ConfigChannel+0x7c4>
 8003058:	4a29      	ldr	r2, [pc, #164]	@ (8003100 <HAL_ADC_ConfigChannel+0x868>)
 800305a:	e000      	b.n	800305e <HAL_ADC_ConfigChannel+0x7c6>
 800305c:	4a23      	ldr	r2, [pc, #140]	@ (80030ec <HAL_ADC_ConfigChannel+0x854>)
 800305e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003066:	4619      	mov	r1, r3
 8003068:	4610      	mov	r0, r2
 800306a:	f7fe fa42 	bl	80014f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800306e:	e031      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a27      	ldr	r2, [pc, #156]	@ (8003114 <HAL_ADC_ConfigChannel+0x87c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d12d      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800307a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800307e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d127      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1c      	ldr	r2, [pc, #112]	@ (80030fc <HAL_ADC_ConfigChannel+0x864>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003098:	d004      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0x80c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a17      	ldr	r2, [pc, #92]	@ (80030fc <HAL_ADC_ConfigChannel+0x864>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x810>
 80030a4:	4a16      	ldr	r2, [pc, #88]	@ (8003100 <HAL_ADC_ConfigChannel+0x868>)
 80030a6:	e000      	b.n	80030aa <HAL_ADC_ConfigChannel+0x812>
 80030a8:	4a10      	ldr	r2, [pc, #64]	@ (80030ec <HAL_ADC_ConfigChannel+0x854>)
 80030aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f7fe fa1c 	bl	80014f2 <LL_ADC_SetCommonPathInternalCh>
 80030ba:	e00c      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80030ce:	e002      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80030de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	37d8      	adds	r7, #216	@ 0xd8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	50000700 	.word	0x50000700
 80030f0:	c3210000 	.word	0xc3210000
 80030f4:	90c00010 	.word	0x90c00010
 80030f8:	50000600 	.word	0x50000600
 80030fc:	50000100 	.word	0x50000100
 8003100:	50000300 	.word	0x50000300
 8003104:	2000000c 	.word	0x2000000c
 8003108:	053e2d63 	.word	0x053e2d63
 800310c:	c7520000 	.word	0xc7520000
 8003110:	50000500 	.word	0x50000500
 8003114:	cb840000 	.word	0xcb840000

08003118 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003120:	2300      	movs	r3, #0
 8003122:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fbd5 	bl	80018d8 <LL_ADC_IsEnabled>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d176      	bne.n	8003222 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	4b3c      	ldr	r3, [pc, #240]	@ (800322c <ADC_Enable+0x114>)
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00d      	beq.n	800315e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003146:	f043 0210 	orr.w	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003152:	f043 0201 	orr.w	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e062      	b.n	8003224 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe fb90 	bl	8001888 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003170:	d004      	beq.n	800317c <ADC_Enable+0x64>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a2e      	ldr	r2, [pc, #184]	@ (8003230 <ADC_Enable+0x118>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <ADC_Enable+0x68>
 800317c:	4b2d      	ldr	r3, [pc, #180]	@ (8003234 <ADC_Enable+0x11c>)
 800317e:	e000      	b.n	8003182 <ADC_Enable+0x6a>
 8003180:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <ADC_Enable+0x120>)
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe f9c8 	bl	8001518 <LL_ADC_GetCommonPathInternalCh>
 8003188:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800318a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800318e:	2b00      	cmp	r3, #0
 8003190:	d013      	beq.n	80031ba <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003192:	4b2a      	ldr	r3, [pc, #168]	@ (800323c <ADC_Enable+0x124>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	4a29      	ldr	r2, [pc, #164]	@ (8003240 <ADC_Enable+0x128>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	099b      	lsrs	r3, r3, #6
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031ac:	e002      	b.n	80031b4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f9      	bne.n	80031ae <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031ba:	f7fe f97b 	bl	80014b4 <HAL_GetTick>
 80031be:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031c0:	e028      	b.n	8003214 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fb86 	bl	80018d8 <LL_ADC_IsEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fb56 	bl	8001888 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031dc:	f7fe f96a 	bl	80014b4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d914      	bls.n	8003214 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d00d      	beq.n	8003214 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fc:	f043 0210 	orr.w	r2, r3, #16
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003208:	f043 0201 	orr.w	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e007      	b.n	8003224 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d1cf      	bne.n	80031c2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	8000003f 	.word	0x8000003f
 8003230:	50000100 	.word	0x50000100
 8003234:	50000300 	.word	0x50000300
 8003238:	50000700 	.word	0x50000700
 800323c:	2000000c 	.word	0x2000000c
 8003240:	053e2d63 	.word	0x053e2d63

08003244 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fb54 	bl	80018fe <LL_ADC_IsDisableOngoing>
 8003256:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe fb3b 	bl	80018d8 <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d047      	beq.n	80032f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d144      	bne.n	80032f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030d 	and.w	r3, r3, #13
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10c      	bne.n	8003296 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe fb15 	bl	80018b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2203      	movs	r2, #3
 800328c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800328e:	f7fe f911 	bl	80014b4 <HAL_GetTick>
 8003292:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003294:	e029      	b.n	80032ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e023      	b.n	80032fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032b2:	f7fe f8ff 	bl	80014b4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d914      	bls.n	80032ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e007      	b.n	80032fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1dc      	bne.n	80032b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <LL_ADC_IsEnabled>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <LL_ADC_IsEnabled+0x18>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <LL_ADC_IsEnabled+0x1a>
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_StartCalibration>:
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800333a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003344:	4313      	orrs	r3, r2
 8003346:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	609a      	str	r2, [r3, #8]
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_ADC_IsCalibrationOnGoing>:
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800336a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800336e:	d101      	bne.n	8003374 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_ADC_REG_IsConversionOngoing>:
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d101      	bne.n	800339a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_ADCEx_Calibration_Start+0x1c>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e04d      	b.n	8003460 <HAL_ADCEx_Calibration_Start+0xb8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff39 	bl	8003244 <ADC_Disable>
 80033d2:	4603      	mov	r3, r0
 80033d4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d136      	bne.n	800344a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033e4:	f023 0302 	bic.w	r3, r3, #2
 80033e8:	f043 0202 	orr.w	r2, r3, #2
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6839      	ldr	r1, [r7, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ff96 	bl	8003328 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033fc:	e014      	b.n	8003428 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3301      	adds	r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4a18      	ldr	r2, [pc, #96]	@ (8003468 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d90d      	bls.n	8003428 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	f023 0312 	bic.w	r3, r3, #18
 8003414:	f043 0210 	orr.w	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e01b      	b.n	8003460 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff94 	bl	800335a <LL_ADC_IsCalibrationOnGoing>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e2      	bne.n	80033fe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343c:	f023 0303 	bic.w	r3, r3, #3
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003448:	e005      	b.n	8003456 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	f043 0210 	orr.w	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	0004de01 	.word	0x0004de01

0800346c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b0a1      	sub	sp, #132	@ 0x84
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0e7      	b.n	80036be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80034f6:	2300      	movs	r3, #0
 80034f8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80034fa:	2300      	movs	r3, #0
 80034fc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003506:	d102      	bne.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003508:	4b6f      	ldr	r3, [pc, #444]	@ (80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	e009      	b.n	8003522 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6e      	ldr	r2, [pc, #440]	@ (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d102      	bne.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003518:	4b6d      	ldr	r3, [pc, #436]	@ (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	e001      	b.n	8003522 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0be      	b.n	80036be <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ff1d 	bl	8003382 <LL_ADC_REG_IsConversionOngoing>
 8003548:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff17 	bl	8003382 <LL_ADC_REG_IsConversionOngoing>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 80a0 	bne.w	800369c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800355c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 809c 	bne.w	800369c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800356c:	d004      	beq.n	8003578 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a55      	ldr	r2, [pc, #340]	@ (80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d101      	bne.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003578:	4b56      	ldr	r3, [pc, #344]	@ (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800357a:	e000      	b.n	800357e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800357c:	4b56      	ldr	r3, [pc, #344]	@ (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800357e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d04b      	beq.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003588:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800359a:	035b      	lsls	r3, r3, #13
 800359c:	430b      	orrs	r3, r1
 800359e:	431a      	orrs	r2, r3
 80035a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ac:	d004      	beq.n	80035b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a45      	ldr	r2, [pc, #276]	@ (80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d10f      	bne.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80035b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80035bc:	f7ff fea1 	bl	8003302 <LL_ADC_IsEnabled>
 80035c0:	4604      	mov	r4, r0
 80035c2:	4841      	ldr	r0, [pc, #260]	@ (80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035c4:	f7ff fe9d 	bl	8003302 <LL_ADC_IsEnabled>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4323      	orrs	r3, r4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e012      	b.n	80035fe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80035d8:	483c      	ldr	r0, [pc, #240]	@ (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035da:	f7ff fe92 	bl	8003302 <LL_ADC_IsEnabled>
 80035de:	4604      	mov	r4, r0
 80035e0:	483b      	ldr	r0, [pc, #236]	@ (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035e2:	f7ff fe8e 	bl	8003302 <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	431c      	orrs	r4, r3
 80035ea:	483c      	ldr	r0, [pc, #240]	@ (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80035ec:	f7ff fe89 	bl	8003302 <LL_ADC_IsEnabled>
 80035f0:	4603      	mov	r3, r0
 80035f2:	4323      	orrs	r3, r4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf0c      	ite	eq
 80035f8:	2301      	moveq	r3, #1
 80035fa:	2300      	movne	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d056      	beq.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800360a:	f023 030f 	bic.w	r3, r3, #15
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	6811      	ldr	r1, [r2, #0]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	6892      	ldr	r2, [r2, #8]
 8003616:	430a      	orrs	r2, r1
 8003618:	431a      	orrs	r2, r3
 800361a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800361c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800361e:	e047      	b.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003620:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800362a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003634:	d004      	beq.n	8003640 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a23      	ldr	r2, [pc, #140]	@ (80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d10f      	bne.n	8003660 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003640:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003644:	f7ff fe5d 	bl	8003302 <LL_ADC_IsEnabled>
 8003648:	4604      	mov	r4, r0
 800364a:	481f      	ldr	r0, [pc, #124]	@ (80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800364c:	f7ff fe59 	bl	8003302 <LL_ADC_IsEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	4323      	orrs	r3, r4
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e012      	b.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003660:	481a      	ldr	r0, [pc, #104]	@ (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003662:	f7ff fe4e 	bl	8003302 <LL_ADC_IsEnabled>
 8003666:	4604      	mov	r4, r0
 8003668:	4819      	ldr	r0, [pc, #100]	@ (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800366a:	f7ff fe4a 	bl	8003302 <LL_ADC_IsEnabled>
 800366e:	4603      	mov	r3, r0
 8003670:	431c      	orrs	r4, r3
 8003672:	481a      	ldr	r0, [pc, #104]	@ (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003674:	f7ff fe45 	bl	8003302 <LL_ADC_IsEnabled>
 8003678:	4603      	mov	r3, r0
 800367a:	4323      	orrs	r3, r4
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d012      	beq.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800368a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003692:	f023 030f 	bic.w	r3, r3, #15
 8003696:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003698:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800369a:	e009      	b.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80036ae:	e000      	b.n	80036b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3784      	adds	r7, #132	@ 0x84
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd90      	pop	{r4, r7, pc}
 80036c6:	bf00      	nop
 80036c8:	50000100 	.word	0x50000100
 80036cc:	50000400 	.word	0x50000400
 80036d0:	50000500 	.word	0x50000500
 80036d4:	50000300 	.word	0x50000300
 80036d8:	50000700 	.word	0x50000700
 80036dc:	50000600 	.word	0x50000600

080036e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036fc:	4013      	ands	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800370c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003712:	4a04      	ldr	r2, [pc, #16]	@ (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	60d3      	str	r3, [r2, #12]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800372c:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <__NVIC_GetPriorityGrouping+0x18>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	0a1b      	lsrs	r3, r3, #8
 8003732:	f003 0307 	and.w	r3, r3, #7
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	db0b      	blt.n	800376e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	4907      	ldr	r1, [pc, #28]	@ (800377c <__NVIC_EnableIRQ+0x38>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2001      	movs	r0, #1
 8003766:	fa00 f202 	lsl.w	r2, r0, r2
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000e100 	.word	0xe000e100

08003780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	2b00      	cmp	r3, #0
 8003792:	db0a      	blt.n	80037aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	490c      	ldr	r1, [pc, #48]	@ (80037cc <__NVIC_SetPriority+0x4c>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	440b      	add	r3, r1
 80037a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a8:	e00a      	b.n	80037c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4908      	ldr	r1, [pc, #32]	@ (80037d0 <__NVIC_SetPriority+0x50>)
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	3b04      	subs	r3, #4
 80037b8:	0112      	lsls	r2, r2, #4
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	440b      	add	r3, r1
 80037be:	761a      	strb	r2, [r3, #24]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000e100 	.word	0xe000e100
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f1c3 0307 	rsb	r3, r3, #7
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	bf28      	it	cs
 80037f2:	2304      	movcs	r3, #4
 80037f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d902      	bls.n	8003804 <NVIC_EncodePriority+0x30>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3b03      	subs	r3, #3
 8003802:	e000      	b.n	8003806 <NVIC_EncodePriority+0x32>
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003808:	f04f 32ff 	mov.w	r2, #4294967295
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	401a      	ands	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800381c:	f04f 31ff 	mov.w	r1, #4294967295
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	43d9      	mvns	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	4313      	orrs	r3, r2
         );
}
 800382e:	4618      	mov	r0, r3
 8003830:	3724      	adds	r7, #36	@ 0x24
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800384c:	d301      	bcc.n	8003852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800384e:	2301      	movs	r3, #1
 8003850:	e00f      	b.n	8003872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003852:	4a0a      	ldr	r2, [pc, #40]	@ (800387c <SysTick_Config+0x40>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800385a:	210f      	movs	r1, #15
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	f7ff ff8e 	bl	8003780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003864:	4b05      	ldr	r3, [pc, #20]	@ (800387c <SysTick_Config+0x40>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800386a:	4b04      	ldr	r3, [pc, #16]	@ (800387c <SysTick_Config+0x40>)
 800386c:	2207      	movs	r2, #7
 800386e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	e000e010 	.word	0xe000e010

08003880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff29 	bl	80036e0 <__NVIC_SetPriorityGrouping>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038a4:	f7ff ff40 	bl	8003728 <__NVIC_GetPriorityGrouping>
 80038a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	6978      	ldr	r0, [r7, #20]
 80038b0:	f7ff ff90 	bl	80037d4 <NVIC_EncodePriority>
 80038b4:	4602      	mov	r2, r0
 80038b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ba:	4611      	mov	r1, r2
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff5f 	bl	8003780 <__NVIC_SetPriority>
}
 80038c2:	bf00      	nop
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4603      	mov	r3, r0
 80038d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff33 	bl	8003744 <__NVIC_EnableIRQ>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ffa4 	bl	800383c <SysTick_Config>
 80038f4:	4603      	mov	r3, r0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800390e:	e15a      	b.n	8003bc6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 814c 	beq.w	8003bc0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d005      	beq.n	8003940 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800393c:	2b02      	cmp	r3, #2
 800393e:	d130      	bne.n	80039a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003976:	2201      	movs	r2, #1
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	f003 0201 	and.w	r2, r3, #1
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d017      	beq.n	80039de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d123      	bne.n	8003a32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	08da      	lsrs	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3208      	adds	r2, #8
 80039f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	220f      	movs	r2, #15
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	08da      	lsrs	r2, r3, #3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3208      	adds	r2, #8
 8003a2c:	6939      	ldr	r1, [r7, #16]
 8003a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0203 	and.w	r2, r3, #3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80a6 	beq.w	8003bc0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a74:	4b5b      	ldr	r3, [pc, #364]	@ (8003be4 <HAL_GPIO_Init+0x2e4>)
 8003a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a78:	4a5a      	ldr	r2, [pc, #360]	@ (8003be4 <HAL_GPIO_Init+0x2e4>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a80:	4b58      	ldr	r3, [pc, #352]	@ (8003be4 <HAL_GPIO_Init+0x2e4>)
 8003a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a8c:	4a56      	ldr	r2, [pc, #344]	@ (8003be8 <HAL_GPIO_Init+0x2e8>)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	3302      	adds	r3, #2
 8003a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	220f      	movs	r2, #15
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ab6:	d01f      	beq.n	8003af8 <HAL_GPIO_Init+0x1f8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a4c      	ldr	r2, [pc, #304]	@ (8003bec <HAL_GPIO_Init+0x2ec>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d019      	beq.n	8003af4 <HAL_GPIO_Init+0x1f4>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a4b      	ldr	r2, [pc, #300]	@ (8003bf0 <HAL_GPIO_Init+0x2f0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <HAL_GPIO_Init+0x1f0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf4 <HAL_GPIO_Init+0x2f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00d      	beq.n	8003aec <HAL_GPIO_Init+0x1ec>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a49      	ldr	r2, [pc, #292]	@ (8003bf8 <HAL_GPIO_Init+0x2f8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <HAL_GPIO_Init+0x1e8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a48      	ldr	r2, [pc, #288]	@ (8003bfc <HAL_GPIO_Init+0x2fc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_GPIO_Init+0x1e4>
 8003ae0:	2305      	movs	r3, #5
 8003ae2:	e00a      	b.n	8003afa <HAL_GPIO_Init+0x1fa>
 8003ae4:	2306      	movs	r3, #6
 8003ae6:	e008      	b.n	8003afa <HAL_GPIO_Init+0x1fa>
 8003ae8:	2304      	movs	r3, #4
 8003aea:	e006      	b.n	8003afa <HAL_GPIO_Init+0x1fa>
 8003aec:	2303      	movs	r3, #3
 8003aee:	e004      	b.n	8003afa <HAL_GPIO_Init+0x1fa>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e002      	b.n	8003afa <HAL_GPIO_Init+0x1fa>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <HAL_GPIO_Init+0x1fa>
 8003af8:	2300      	movs	r3, #0
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	f002 0203 	and.w	r2, r2, #3
 8003b00:	0092      	lsls	r2, r2, #2
 8003b02:	4093      	lsls	r3, r2
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b0a:	4937      	ldr	r1, [pc, #220]	@ (8003be8 <HAL_GPIO_Init+0x2e8>)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	3302      	adds	r3, #2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b18:	4b39      	ldr	r3, [pc, #228]	@ (8003c00 <HAL_GPIO_Init+0x300>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b3c:	4a30      	ldr	r2, [pc, #192]	@ (8003c00 <HAL_GPIO_Init+0x300>)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b42:	4b2f      	ldr	r3, [pc, #188]	@ (8003c00 <HAL_GPIO_Init+0x300>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b66:	4a26      	ldr	r2, [pc, #152]	@ (8003c00 <HAL_GPIO_Init+0x300>)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b6c:	4b24      	ldr	r3, [pc, #144]	@ (8003c00 <HAL_GPIO_Init+0x300>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b90:	4a1b      	ldr	r2, [pc, #108]	@ (8003c00 <HAL_GPIO_Init+0x300>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b96:	4b1a      	ldr	r3, [pc, #104]	@ (8003c00 <HAL_GPIO_Init+0x300>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bba:	4a11      	ldr	r2, [pc, #68]	@ (8003c00 <HAL_GPIO_Init+0x300>)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f47f ae9d 	bne.w	8003910 <HAL_GPIO_Init+0x10>
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40010000 	.word	0x40010000
 8003bec:	48000400 	.word	0x48000400
 8003bf0:	48000800 	.word	0x48000800
 8003bf4:	48000c00 	.word	0x48000c00
 8003bf8:	48001000 	.word	0x48001000
 8003bfc:	48001400 	.word	0x48001400
 8003c00:	40010400 	.word	0x40010400

08003c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	807b      	strh	r3, [r7, #2]
 8003c10:	4613      	mov	r3, r2
 8003c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c14:	787b      	ldrb	r3, [r7, #1]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c20:	e002      	b.n	8003c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c46:	887a      	ldrh	r2, [r7, #2]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	041a      	lsls	r2, r3, #16
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	43d9      	mvns	r1, r3
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	400b      	ands	r3, r1
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	619a      	str	r2, [r3, #24]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d141      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c76:	4b4b      	ldr	r3, [pc, #300]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c82:	d131      	bne.n	8003ce8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c84:	4b47      	ldr	r3, [pc, #284]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c8a:	4a46      	ldr	r2, [pc, #280]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c94:	4b43      	ldr	r3, [pc, #268]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c9c:	4a41      	ldr	r2, [pc, #260]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ca4:	4b40      	ldr	r3, [pc, #256]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2232      	movs	r2, #50	@ 0x32
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	4a3f      	ldr	r2, [pc, #252]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	0c9b      	lsrs	r3, r3, #18
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cba:	e002      	b.n	8003cc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc2:	4b38      	ldr	r3, [pc, #224]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cce:	d102      	bne.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f2      	bne.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cd6:	4b33      	ldr	r3, [pc, #204]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce2:	d158      	bne.n	8003d96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e057      	b.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cee:	4a2d      	ldr	r2, [pc, #180]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cf4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003cf8:	e04d      	b.n	8003d96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d00:	d141      	bne.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d02:	4b28      	ldr	r3, [pc, #160]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0e:	d131      	bne.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d10:	4b24      	ldr	r3, [pc, #144]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d16:	4a23      	ldr	r2, [pc, #140]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d20:	4b20      	ldr	r3, [pc, #128]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d28:	4a1e      	ldr	r2, [pc, #120]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d30:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2232      	movs	r2, #50	@ 0x32
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	0c9b      	lsrs	r3, r3, #18
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d46:	e002      	b.n	8003d4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4e:	4b15      	ldr	r3, [pc, #84]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5a:	d102      	bne.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f2      	bne.n	8003d48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d62:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6e:	d112      	bne.n	8003d96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e011      	b.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d74:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d84:	e007      	b.n	8003d96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d86:	4b07      	ldr	r3, [pc, #28]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d8e:	4a05      	ldr	r2, [pc, #20]	@ (8003da4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40007000 	.word	0x40007000
 8003da8:	2000000c 	.word	0x2000000c
 8003dac:	431bde83 	.word	0x431bde83

08003db0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003db4:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a04      	ldr	r2, [pc, #16]	@ (8003dcc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dbe:	6093      	str	r3, [r2, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40007000 	.word	0x40007000

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e2fe      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d075      	beq.n	8003eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dee:	4b97      	ldr	r3, [pc, #604]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df8:	4b94      	ldr	r3, [pc, #592]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	d102      	bne.n	8003e0e <HAL_RCC_OscConfig+0x3e>
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d002      	beq.n	8003e14 <HAL_RCC_OscConfig+0x44>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b8d      	ldr	r3, [pc, #564]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x108>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d157      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e2d9      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x74>
 8003e36:	4b85      	ldr	r3, [pc, #532]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a84      	ldr	r2, [pc, #528]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x98>
 8003e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a7e      	ldr	r2, [pc, #504]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a7b      	ldr	r2, [pc, #492]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e68:	4b78      	ldr	r3, [pc, #480]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a77      	ldr	r2, [pc, #476]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b75      	ldr	r3, [pc, #468]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a74      	ldr	r2, [pc, #464]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fb14 	bl	80014b4 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fd fb10 	bl	80014b4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	@ 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e29e      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xc0>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fb00 	bl	80014b4 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd fafc 	bl	80014b4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	@ 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e28a      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eca:	4b60      	ldr	r3, [pc, #384]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xe8>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d075      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee6:	4b59      	ldr	r3, [pc, #356]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef0:	4b56      	ldr	r3, [pc, #344]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b0c      	cmp	r3, #12
 8003efe:	d102      	bne.n	8003f06 <HAL_RCC_OscConfig+0x136>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d002      	beq.n	8003f0c <HAL_RCC_OscConfig+0x13c>
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d11f      	bne.n	8003f4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f0c:	4b4f      	ldr	r3, [pc, #316]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_OscConfig+0x154>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e25d      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f24:	4b49      	ldr	r3, [pc, #292]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	061b      	lsls	r3, r3, #24
 8003f32:	4946      	ldr	r1, [pc, #280]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f38:	4b45      	ldr	r3, [pc, #276]	@ (8004050 <HAL_RCC_OscConfig+0x280>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fd fa6d 	bl	800141c <HAL_InitTick>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d043      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e249      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d023      	beq.n	8003f9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f54:	4b3d      	ldr	r3, [pc, #244]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a3c      	ldr	r2, [pc, #240]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fd faa8 	bl	80014b4 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f68:	f7fd faa4 	bl	80014b4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e232      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7a:	4b34      	ldr	r3, [pc, #208]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f86:	4b31      	ldr	r3, [pc, #196]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	492d      	ldr	r1, [pc, #180]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
 8003f9a:	e01a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fa84 	bl	80014b4 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb0:	f7fd fa80 	bl	80014b4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e20e      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc2:	4b22      	ldr	r3, [pc, #136]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x1e0>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d041      	beq.n	8004062 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01c      	beq.n	8004020 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe6:	4b19      	ldr	r3, [pc, #100]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fec:	4a17      	ldr	r2, [pc, #92]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff6:	f7fd fa5d 	bl	80014b4 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7fd fa59 	bl	80014b4 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e1e7      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004010:	4b0e      	ldr	r3, [pc, #56]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8004012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ef      	beq.n	8003ffe <HAL_RCC_OscConfig+0x22e>
 800401e:	e020      	b.n	8004062 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004020:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004026:	4a09      	ldr	r2, [pc, #36]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004030:	f7fd fa40 	bl	80014b4 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004036:	e00d      	b.n	8004054 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004038:	f7fd fa3c 	bl	80014b4 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d906      	bls.n	8004054 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e1ca      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000
 8004050:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004054:	4b8c      	ldr	r3, [pc, #560]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1ea      	bne.n	8004038 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80a6 	beq.w	80041bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004070:	2300      	movs	r3, #0
 8004072:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004074:	4b84      	ldr	r3, [pc, #528]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_OscConfig+0x2b4>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x2b6>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408a:	4b7f      	ldr	r3, [pc, #508]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408e:	4a7e      	ldr	r2, [pc, #504]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004094:	6593      	str	r3, [r2, #88]	@ 0x58
 8004096:	4b7c      	ldr	r3, [pc, #496]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040a2:	2301      	movs	r3, #1
 80040a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a6:	4b79      	ldr	r3, [pc, #484]	@ (800428c <HAL_RCC_OscConfig+0x4bc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d118      	bne.n	80040e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b2:	4b76      	ldr	r3, [pc, #472]	@ (800428c <HAL_RCC_OscConfig+0x4bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a75      	ldr	r2, [pc, #468]	@ (800428c <HAL_RCC_OscConfig+0x4bc>)
 80040b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040be:	f7fd f9f9 	bl	80014b4 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c6:	f7fd f9f5 	bl	80014b4 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e183      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d8:	4b6c      	ldr	r3, [pc, #432]	@ (800428c <HAL_RCC_OscConfig+0x4bc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d108      	bne.n	80040fe <HAL_RCC_OscConfig+0x32e>
 80040ec:	4b66      	ldr	r3, [pc, #408]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f2:	4a65      	ldr	r2, [pc, #404]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040fc:	e024      	b.n	8004148 <HAL_RCC_OscConfig+0x378>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b05      	cmp	r3, #5
 8004104:	d110      	bne.n	8004128 <HAL_RCC_OscConfig+0x358>
 8004106:	4b60      	ldr	r3, [pc, #384]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410c:	4a5e      	ldr	r2, [pc, #376]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 800410e:	f043 0304 	orr.w	r3, r3, #4
 8004112:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004116:	4b5c      	ldr	r3, [pc, #368]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411c:	4a5a      	ldr	r2, [pc, #360]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004126:	e00f      	b.n	8004148 <HAL_RCC_OscConfig+0x378>
 8004128:	4b57      	ldr	r3, [pc, #348]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412e:	4a56      	ldr	r2, [pc, #344]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004138:	4b53      	ldr	r3, [pc, #332]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413e:	4a52      	ldr	r2, [pc, #328]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004140:	f023 0304 	bic.w	r3, r3, #4
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d016      	beq.n	800417e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fd f9b0 	bl	80014b4 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004156:	e00a      	b.n	800416e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004158:	f7fd f9ac 	bl	80014b4 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e138      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800416e:	4b46      	ldr	r3, [pc, #280]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0ed      	beq.n	8004158 <HAL_RCC_OscConfig+0x388>
 800417c:	e015      	b.n	80041aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fd f999 	bl	80014b4 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004184:	e00a      	b.n	800419c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fd f995 	bl	80014b4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e121      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800419c:	4b3a      	ldr	r3, [pc, #232]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1ed      	bne.n	8004186 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041aa:	7ffb      	ldrb	r3, [r7, #31]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b0:	4b35      	ldr	r3, [pc, #212]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b4:	4a34      	ldr	r2, [pc, #208]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d03c      	beq.n	8004242 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01c      	beq.n	800420a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 80041d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e0:	f7fd f968 	bl	80014b4 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041e8:	f7fd f964 	bl	80014b4 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e0f2      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041fa:	4b23      	ldr	r3, [pc, #140]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 80041fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ef      	beq.n	80041e8 <HAL_RCC_OscConfig+0x418>
 8004208:	e01b      	b.n	8004242 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800420a:	4b1f      	ldr	r3, [pc, #124]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 800420c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004210:	4a1d      	ldr	r2, [pc, #116]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421a:	f7fd f94b 	bl	80014b4 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004222:	f7fd f947 	bl	80014b4 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e0d5      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004234:	4b14      	ldr	r3, [pc, #80]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004236:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1ef      	bne.n	8004222 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80c9 	beq.w	80043de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800424c:	4b0e      	ldr	r3, [pc, #56]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b0c      	cmp	r3, #12
 8004256:	f000 8083 	beq.w	8004360 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d15e      	bne.n	8004320 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004262:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a08      	ldr	r2, [pc, #32]	@ (8004288 <HAL_RCC_OscConfig+0x4b8>)
 8004268:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800426c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426e:	f7fd f921 	bl	80014b4 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004274:	e00c      	b.n	8004290 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004276:	f7fd f91d 	bl	80014b4 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d905      	bls.n	8004290 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e0ab      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
 8004288:	40021000 	.word	0x40021000
 800428c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004290:	4b55      	ldr	r3, [pc, #340]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ec      	bne.n	8004276 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800429c:	4b52      	ldr	r3, [pc, #328]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	4b52      	ldr	r3, [pc, #328]	@ (80043ec <HAL_RCC_OscConfig+0x61c>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6a11      	ldr	r1, [r2, #32]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042ac:	3a01      	subs	r2, #1
 80042ae:	0112      	lsls	r2, r2, #4
 80042b0:	4311      	orrs	r1, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042b6:	0212      	lsls	r2, r2, #8
 80042b8:	4311      	orrs	r1, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042be:	0852      	lsrs	r2, r2, #1
 80042c0:	3a01      	subs	r2, #1
 80042c2:	0552      	lsls	r2, r2, #21
 80042c4:	4311      	orrs	r1, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042ca:	0852      	lsrs	r2, r2, #1
 80042cc:	3a01      	subs	r2, #1
 80042ce:	0652      	lsls	r2, r2, #25
 80042d0:	4311      	orrs	r1, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042d6:	06d2      	lsls	r2, r2, #27
 80042d8:	430a      	orrs	r2, r1
 80042da:	4943      	ldr	r1, [pc, #268]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e0:	4b41      	ldr	r3, [pc, #260]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a40      	ldr	r2, [pc, #256]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 80042e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042ec:	4b3e      	ldr	r3, [pc, #248]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a3d      	ldr	r2, [pc, #244]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 80042f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fd f8dc 	bl	80014b4 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004300:	f7fd f8d8 	bl	80014b4 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e066      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004312:	4b35      	ldr	r3, [pc, #212]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x530>
 800431e:	e05e      	b.n	80043de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004320:	4b31      	ldr	r3, [pc, #196]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a30      	ldr	r2, [pc, #192]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 8004326:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800432a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fd f8c2 	bl	80014b4 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004334:	f7fd f8be 	bl	80014b4 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e04c      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004346:	4b28      	ldr	r3, [pc, #160]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004352:	4b25      	ldr	r3, [pc, #148]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	4924      	ldr	r1, [pc, #144]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 8004358:	4b25      	ldr	r3, [pc, #148]	@ (80043f0 <HAL_RCC_OscConfig+0x620>)
 800435a:	4013      	ands	r3, r2
 800435c:	60cb      	str	r3, [r1, #12]
 800435e:	e03e      	b.n	80043de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e039      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800436c:	4b1e      	ldr	r3, [pc, #120]	@ (80043e8 <HAL_RCC_OscConfig+0x618>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 0203 	and.w	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	429a      	cmp	r2, r3
 800437e:	d12c      	bne.n	80043da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	3b01      	subs	r3, #1
 800438c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438e:	429a      	cmp	r2, r3
 8004390:	d123      	bne.n	80043da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d11b      	bne.n	80043da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d113      	bne.n	80043da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d109      	bne.n	80043da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	3b01      	subs	r3, #1
 80043d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	019f800c 	.word	0x019f800c
 80043f0:	feeefffc 	.word	0xfeeefffc

080043f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e11e      	b.n	800464a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800440c:	4b91      	ldr	r3, [pc, #580]	@ (8004654 <HAL_RCC_ClockConfig+0x260>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d910      	bls.n	800443c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b8e      	ldr	r3, [pc, #568]	@ (8004654 <HAL_RCC_ClockConfig+0x260>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 020f 	bic.w	r2, r3, #15
 8004422:	498c      	ldr	r1, [pc, #560]	@ (8004654 <HAL_RCC_ClockConfig+0x260>)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b8a      	ldr	r3, [pc, #552]	@ (8004654 <HAL_RCC_ClockConfig+0x260>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e106      	b.n	800464a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d073      	beq.n	8004530 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d129      	bne.n	80044a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004450:	4b81      	ldr	r3, [pc, #516]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0f4      	b.n	800464a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004460:	f000 f966 	bl	8004730 <RCC_GetSysClockFreqFromPLLSource>
 8004464:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4a7c      	ldr	r2, [pc, #496]	@ (800465c <HAL_RCC_ClockConfig+0x268>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d93f      	bls.n	80044ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800446e:	4b7a      	ldr	r3, [pc, #488]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004482:	2b00      	cmp	r3, #0
 8004484:	d033      	beq.n	80044ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800448a:	2b00      	cmp	r3, #0
 800448c:	d12f      	bne.n	80044ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800448e:	4b72      	ldr	r3, [pc, #456]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004496:	4a70      	ldr	r2, [pc, #448]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 8004498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800449c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e024      	b.n	80044ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0c6      	b.n	800464a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044bc:	4b66      	ldr	r3, [pc, #408]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0be      	b.n	800464a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80044cc:	f000 f8ce 	bl	800466c <HAL_RCC_GetSysClockFreq>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4a61      	ldr	r2, [pc, #388]	@ (800465c <HAL_RCC_ClockConfig+0x268>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d909      	bls.n	80044ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044da:	4b5f      	ldr	r3, [pc, #380]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 80044e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80044ea:	2380      	movs	r3, #128	@ 0x80
 80044ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4957      	ldr	r1, [pc, #348]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004500:	f7fc ffd8 	bl	80014b4 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	e00a      	b.n	800451e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004508:	f7fc ffd4 	bl	80014b4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e095      	b.n	800464a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	4b4e      	ldr	r3, [pc, #312]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 020c 	and.w	r2, r3, #12
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	429a      	cmp	r2, r3
 800452e:	d1eb      	bne.n	8004508 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d023      	beq.n	8004584 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004548:	4b43      	ldr	r3, [pc, #268]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a42      	ldr	r2, [pc, #264]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 800454e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004552:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004560:	4b3d      	ldr	r3, [pc, #244]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004568:	4a3b      	ldr	r2, [pc, #236]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 800456a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800456e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004570:	4b39      	ldr	r3, [pc, #228]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4936      	ldr	r1, [pc, #216]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
 8004582:	e008      	b.n	8004596 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2b80      	cmp	r3, #128	@ 0x80
 8004588:	d105      	bne.n	8004596 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800458a:	4b33      	ldr	r3, [pc, #204]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	4a32      	ldr	r2, [pc, #200]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 8004590:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004594:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004596:	4b2f      	ldr	r3, [pc, #188]	@ (8004654 <HAL_RCC_ClockConfig+0x260>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d21d      	bcs.n	80045e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004654 <HAL_RCC_ClockConfig+0x260>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 020f 	bic.w	r2, r3, #15
 80045ac:	4929      	ldr	r1, [pc, #164]	@ (8004654 <HAL_RCC_ClockConfig+0x260>)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045b4:	f7fc ff7e 	bl	80014b4 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045bc:	f7fc ff7a 	bl	80014b4 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e03b      	b.n	800464a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b20      	ldr	r3, [pc, #128]	@ (8004654 <HAL_RCC_ClockConfig+0x260>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1ed      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4917      	ldr	r1, [pc, #92]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800460a:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	490f      	ldr	r1, [pc, #60]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800461e:	f000 f825 	bl	800466c <HAL_RCC_GetSysClockFreq>
 8004622:	4602      	mov	r2, r0
 8004624:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <HAL_RCC_ClockConfig+0x264>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	490c      	ldr	r1, [pc, #48]	@ (8004660 <HAL_RCC_ClockConfig+0x26c>)
 8004630:	5ccb      	ldrb	r3, [r1, r3]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	4a0a      	ldr	r2, [pc, #40]	@ (8004664 <HAL_RCC_ClockConfig+0x270>)
 800463c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800463e:	4b0a      	ldr	r3, [pc, #40]	@ (8004668 <HAL_RCC_ClockConfig+0x274>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fc feea 	bl	800141c <HAL_InitTick>
 8004648:	4603      	mov	r3, r0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40022000 	.word	0x40022000
 8004658:	40021000 	.word	0x40021000
 800465c:	04c4b400 	.word	0x04c4b400
 8004660:	08006594 	.word	0x08006594
 8004664:	2000000c 	.word	0x2000000c
 8004668:	20000010 	.word	0x20000010

0800466c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004672:	4b2c      	ldr	r3, [pc, #176]	@ (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b04      	cmp	r3, #4
 800467c:	d102      	bne.n	8004684 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800467e:	4b2a      	ldr	r3, [pc, #168]	@ (8004728 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	e047      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004684:	4b27      	ldr	r3, [pc, #156]	@ (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 030c 	and.w	r3, r3, #12
 800468c:	2b08      	cmp	r3, #8
 800468e:	d102      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004690:	4b26      	ldr	r3, [pc, #152]	@ (800472c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	e03e      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004696:	4b23      	ldr	r3, [pc, #140]	@ (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b0c      	cmp	r3, #12
 80046a0:	d136      	bne.n	8004710 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046a2:	4b20      	ldr	r3, [pc, #128]	@ (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	3301      	adds	r3, #1
 80046b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d10c      	bne.n	80046da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c0:	4a1a      	ldr	r2, [pc, #104]	@ (800472c <HAL_RCC_GetSysClockFreq+0xc0>)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	4a16      	ldr	r2, [pc, #88]	@ (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ca:	68d2      	ldr	r2, [r2, #12]
 80046cc:	0a12      	lsrs	r2, r2, #8
 80046ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	617b      	str	r3, [r7, #20]
      break;
 80046d8:	e00c      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046da:	4a13      	ldr	r2, [pc, #76]	@ (8004728 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e2:	4a10      	ldr	r2, [pc, #64]	@ (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e4:	68d2      	ldr	r2, [r2, #12]
 80046e6:	0a12      	lsrs	r2, r2, #8
 80046e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046ec:	fb02 f303 	mul.w	r3, r2, r3
 80046f0:	617b      	str	r3, [r7, #20]
      break;
 80046f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	0e5b      	lsrs	r3, r3, #25
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	3301      	adds	r3, #1
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	e001      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004714:	693b      	ldr	r3, [r7, #16]
}
 8004716:	4618      	mov	r0, r3
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40021000 	.word	0x40021000
 8004728:	00f42400 	.word	0x00f42400
 800472c:	016e3600 	.word	0x016e3600

08004730 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004736:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004740:	4b1b      	ldr	r3, [pc, #108]	@ (80047b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	3301      	adds	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d10c      	bne.n	800476e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004754:	4a17      	ldr	r2, [pc, #92]	@ (80047b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	4a14      	ldr	r2, [pc, #80]	@ (80047b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800475e:	68d2      	ldr	r2, [r2, #12]
 8004760:	0a12      	lsrs	r2, r2, #8
 8004762:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004766:	fb02 f303 	mul.w	r3, r2, r3
 800476a:	617b      	str	r3, [r7, #20]
    break;
 800476c:	e00c      	b.n	8004788 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800476e:	4a12      	ldr	r2, [pc, #72]	@ (80047b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	4a0e      	ldr	r2, [pc, #56]	@ (80047b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004778:	68d2      	ldr	r2, [r2, #12]
 800477a:	0a12      	lsrs	r2, r2, #8
 800477c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004780:	fb02 f303 	mul.w	r3, r2, r3
 8004784:	617b      	str	r3, [r7, #20]
    break;
 8004786:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004788:	4b09      	ldr	r3, [pc, #36]	@ (80047b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	0e5b      	lsrs	r3, r3, #25
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	3301      	adds	r3, #1
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047a2:	687b      	ldr	r3, [r7, #4]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40021000 	.word	0x40021000
 80047b4:	016e3600 	.word	0x016e3600
 80047b8:	00f42400 	.word	0x00f42400

080047bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047c4:	2300      	movs	r3, #0
 80047c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047c8:	2300      	movs	r3, #0
 80047ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8098 	beq.w	800490a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047da:	2300      	movs	r3, #0
 80047dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047de:	4b43      	ldr	r3, [pc, #268]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10d      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ea:	4b40      	ldr	r3, [pc, #256]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	4a3f      	ldr	r2, [pc, #252]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047f6:	4b3d      	ldr	r3, [pc, #244]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004802:	2301      	movs	r3, #1
 8004804:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004806:	4b3a      	ldr	r3, [pc, #232]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a39      	ldr	r2, [pc, #228]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004810:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004812:	f7fc fe4f 	bl	80014b4 <HAL_GetTick>
 8004816:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004818:	e009      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fc fe4b 	bl	80014b4 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d902      	bls.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	74fb      	strb	r3, [r7, #19]
        break;
 800482c:	e005      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800482e:	4b30      	ldr	r3, [pc, #192]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ef      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800483a:	7cfb      	ldrb	r3, [r7, #19]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d159      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004840:	4b2a      	ldr	r3, [pc, #168]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01e      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	429a      	cmp	r2, r3
 800485a:	d019      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800485c:	4b23      	ldr	r3, [pc, #140]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004866:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004868:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486e:	4a1f      	ldr	r2, [pc, #124]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004878:	4b1c      	ldr	r3, [pc, #112]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	4a1b      	ldr	r2, [pc, #108]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004888:	4a18      	ldr	r2, [pc, #96]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d016      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489a:	f7fc fe0b 	bl	80014b4 <HAL_GetTick>
 800489e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a0:	e00b      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7fc fe07 	bl	80014b4 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d902      	bls.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	74fb      	strb	r3, [r7, #19]
            break;
 80048b8:	e006      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ba:	4b0c      	ldr	r3, [pc, #48]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ec      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ce:	4b07      	ldr	r3, [pc, #28]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048dc:	4903      	ldr	r1, [pc, #12]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048e4:	e008      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	74bb      	strb	r3, [r7, #18]
 80048ea:	e005      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f8:	7c7b      	ldrb	r3, [r7, #17]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d105      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fe:	4ba7      	ldr	r3, [pc, #668]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	4aa6      	ldr	r2, [pc, #664]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004908:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004916:	4ba1      	ldr	r3, [pc, #644]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491c:	f023 0203 	bic.w	r2, r3, #3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	499d      	ldr	r1, [pc, #628]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004938:	4b98      	ldr	r3, [pc, #608]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493e:	f023 020c 	bic.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	4995      	ldr	r1, [pc, #596]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800495a:	4b90      	ldr	r3, [pc, #576]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004960:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	498c      	ldr	r1, [pc, #560]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800497c:	4b87      	ldr	r3, [pc, #540]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004982:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	4984      	ldr	r1, [pc, #528]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800499e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	497b      	ldr	r1, [pc, #492]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049c0:	4b76      	ldr	r3, [pc, #472]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	4973      	ldr	r1, [pc, #460]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049e2:	4b6e      	ldr	r3, [pc, #440]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	496a      	ldr	r1, [pc, #424]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a04:	4b65      	ldr	r3, [pc, #404]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	4962      	ldr	r1, [pc, #392]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a26:	4b5d      	ldr	r3, [pc, #372]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	4959      	ldr	r1, [pc, #356]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a48:	4b54      	ldr	r3, [pc, #336]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a56:	4951      	ldr	r1, [pc, #324]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	4948      	ldr	r1, [pc, #288]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a8c:	4b43      	ldr	r3, [pc, #268]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9a:	4940      	ldr	r1, [pc, #256]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aaa:	d105      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aac:	4b3b      	ldr	r3, [pc, #236]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a3a      	ldr	r2, [pc, #232]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d015      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ac4:	4b35      	ldr	r3, [pc, #212]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad2:	4932      	ldr	r1, [pc, #200]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ade:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ae2:	d105      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d015      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004afc:	4b27      	ldr	r3, [pc, #156]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0a:	4924      	ldr	r1, [pc, #144]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4a1e      	ldr	r2, [pc, #120]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b34:	4b19      	ldr	r3, [pc, #100]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	4916      	ldr	r1, [pc, #88]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b52:	d105      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b54:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a10      	ldr	r2, [pc, #64]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d019      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	4908      	ldr	r1, [pc, #32]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b8a:	d109      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b8c:	4b03      	ldr	r3, [pc, #12]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a02      	ldr	r2, [pc, #8]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b96:	60d3      	str	r3, [r2, #12]
 8004b98:	e002      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b9a:	bf00      	nop
 8004b9c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bac:	4b29      	ldr	r3, [pc, #164]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bba:	4926      	ldr	r1, [pc, #152]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bcc:	4b21      	ldr	r3, [pc, #132]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4a20      	ldr	r2, [pc, #128]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d015      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004be4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf2:	4918      	ldr	r1, [pc, #96]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c02:	d105      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c04:	4b13      	ldr	r3, [pc, #76]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4a12      	ldr	r2, [pc, #72]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d015      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c2a:	490a      	ldr	r1, [pc, #40]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3c:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a04      	ldr	r2, [pc, #16]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c48:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000

08004c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e049      	b.n	8004cfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc fa96 	bl	80011b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f000 fe34 	bl	8005904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d001      	beq.n	8004d20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e04c      	b.n	8004dba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a26      	ldr	r2, [pc, #152]	@ (8004dc8 <HAL_TIM_Base_Start+0xc0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3a:	d01d      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a22      	ldr	r2, [pc, #136]	@ (8004dcc <HAL_TIM_Base_Start+0xc4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a21      	ldr	r2, [pc, #132]	@ (8004dd0 <HAL_TIM_Base_Start+0xc8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd4 <HAL_TIM_Base_Start+0xcc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd8 <HAL_TIM_Base_Start+0xd0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1c      	ldr	r2, [pc, #112]	@ (8004ddc <HAL_TIM_Base_Start+0xd4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIM_Base_Start+0x70>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	@ (8004de0 <HAL_TIM_Base_Start+0xd8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d115      	bne.n	8004da4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	4b19      	ldr	r3, [pc, #100]	@ (8004de4 <HAL_TIM_Base_Start+0xdc>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d015      	beq.n	8004db6 <HAL_TIM_Base_Start+0xae>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d90:	d011      	beq.n	8004db6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	e008      	b.n	8004db6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e000      	b.n	8004db8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40012c00 	.word	0x40012c00
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40015000 	.word	0x40015000
 8004de4:	00010007 	.word	0x00010007

08004de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d001      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e054      	b.n	8004eaa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d022      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2a:	d01d      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a22      	ldr	r2, [pc, #136]	@ (8004ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d018      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a21      	ldr	r2, [pc, #132]	@ (8004ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00e      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d009      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1c      	ldr	r2, [pc, #112]	@ (8004ecc <HAL_TIM_Base_Start_IT+0xe4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x80>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d115      	bne.n	8004e94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	4b19      	ldr	r3, [pc, #100]	@ (8004ed4 <HAL_TIM_Base_Start_IT+0xec>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b06      	cmp	r3, #6
 8004e78:	d015      	beq.n	8004ea6 <HAL_TIM_Base_Start_IT+0xbe>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e80:	d011      	beq.n	8004ea6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e92:	e008      	b.n	8004ea6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e000      	b.n	8004ea8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40015000 	.word	0x40015000
 8004ed4:	00010007 	.word	0x00010007

08004ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e049      	b.n	8004f7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f841 	bl	8004f86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f000 fcf4 	bl	8005904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <HAL_TIM_PWM_Start+0x24>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	bf14      	ite	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	2300      	moveq	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e03c      	b.n	800503a <HAL_TIM_PWM_Start+0x9e>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d109      	bne.n	8004fda <HAL_TIM_PWM_Start+0x3e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	bf14      	ite	ne
 8004fd2:	2301      	movne	r3, #1
 8004fd4:	2300      	moveq	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	e02f      	b.n	800503a <HAL_TIM_PWM_Start+0x9e>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d109      	bne.n	8004ff4 <HAL_TIM_PWM_Start+0x58>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e022      	b.n	800503a <HAL_TIM_PWM_Start+0x9e>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b0c      	cmp	r3, #12
 8004ff8:	d109      	bne.n	800500e <HAL_TIM_PWM_Start+0x72>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b01      	cmp	r3, #1
 8005004:	bf14      	ite	ne
 8005006:	2301      	movne	r3, #1
 8005008:	2300      	moveq	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	e015      	b.n	800503a <HAL_TIM_PWM_Start+0x9e>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b10      	cmp	r3, #16
 8005012:	d109      	bne.n	8005028 <HAL_TIM_PWM_Start+0x8c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e008      	b.n	800503a <HAL_TIM_PWM_Start+0x9e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e0a6      	b.n	8005190 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <HAL_TIM_PWM_Start+0xb6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005050:	e023      	b.n	800509a <HAL_TIM_PWM_Start+0xfe>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d104      	bne.n	8005062 <HAL_TIM_PWM_Start+0xc6>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005060:	e01b      	b.n	800509a <HAL_TIM_PWM_Start+0xfe>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Start+0xd6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005070:	e013      	b.n	800509a <HAL_TIM_PWM_Start+0xfe>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b0c      	cmp	r3, #12
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0xe6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005080:	e00b      	b.n	800509a <HAL_TIM_PWM_Start+0xfe>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b10      	cmp	r3, #16
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0xf6>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005090:	e003      	b.n	800509a <HAL_TIM_PWM_Start+0xfe>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2201      	movs	r2, #1
 80050a0:	6839      	ldr	r1, [r7, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 f8a8 	bl	80061f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005198 <HAL_TIM_PWM_Start+0x1fc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_TIM_PWM_Start+0x148>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a39      	ldr	r2, [pc, #228]	@ (800519c <HAL_TIM_PWM_Start+0x200>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <HAL_TIM_PWM_Start+0x148>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a37      	ldr	r2, [pc, #220]	@ (80051a0 <HAL_TIM_PWM_Start+0x204>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_TIM_PWM_Start+0x148>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a36      	ldr	r2, [pc, #216]	@ (80051a4 <HAL_TIM_PWM_Start+0x208>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_TIM_PWM_Start+0x148>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a34      	ldr	r2, [pc, #208]	@ (80051a8 <HAL_TIM_PWM_Start+0x20c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIM_PWM_Start+0x148>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a33      	ldr	r2, [pc, #204]	@ (80051ac <HAL_TIM_PWM_Start+0x210>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d101      	bne.n	80050e8 <HAL_TIM_PWM_Start+0x14c>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_TIM_PWM_Start+0x14e>
 80050e8:	2300      	movs	r3, #0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a25      	ldr	r2, [pc, #148]	@ (8005198 <HAL_TIM_PWM_Start+0x1fc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d022      	beq.n	800514e <HAL_TIM_PWM_Start+0x1b2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005110:	d01d      	beq.n	800514e <HAL_TIM_PWM_Start+0x1b2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a26      	ldr	r2, [pc, #152]	@ (80051b0 <HAL_TIM_PWM_Start+0x214>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_TIM_PWM_Start+0x1b2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a24      	ldr	r2, [pc, #144]	@ (80051b4 <HAL_TIM_PWM_Start+0x218>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_TIM_PWM_Start+0x1b2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a23      	ldr	r2, [pc, #140]	@ (80051b8 <HAL_TIM_PWM_Start+0x21c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_TIM_PWM_Start+0x1b2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a19      	ldr	r2, [pc, #100]	@ (800519c <HAL_TIM_PWM_Start+0x200>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_TIM_PWM_Start+0x1b2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <HAL_TIM_PWM_Start+0x204>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_TIM_PWM_Start+0x1b2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a18      	ldr	r2, [pc, #96]	@ (80051ac <HAL_TIM_PWM_Start+0x210>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d115      	bne.n	800517a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	4b19      	ldr	r3, [pc, #100]	@ (80051bc <HAL_TIM_PWM_Start+0x220>)
 8005156:	4013      	ands	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b06      	cmp	r3, #6
 800515e:	d015      	beq.n	800518c <HAL_TIM_PWM_Start+0x1f0>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005166:	d011      	beq.n	800518c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005178:	e008      	b.n	800518c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e000      	b.n	800518e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40013400 	.word	0x40013400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800
 80051ac:	40015000 	.word	0x40015000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	00010007 	.word	0x00010007

080051c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d020      	beq.n	8005224 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01b      	beq.n	8005224 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0202 	mvn.w	r2, #2
 80051f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fb5c 	bl	80058c8 <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fb4e 	bl	80058b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fb5f 	bl	80058dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d020      	beq.n	8005270 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01b      	beq.n	8005270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0204 	mvn.w	r2, #4
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fb36 	bl	80058c8 <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fb28 	bl	80058b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fb39 	bl	80058dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d020      	beq.n	80052bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01b      	beq.n	80052bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0208 	mvn.w	r2, #8
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2204      	movs	r2, #4
 8005292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fb10 	bl	80058c8 <HAL_TIM_IC_CaptureCallback>
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fb02 	bl	80058b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fb13 	bl	80058dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d020      	beq.n	8005308 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0210 	mvn.w	r2, #16
 80052d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2208      	movs	r2, #8
 80052de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 faea 	bl	80058c8 <HAL_TIM_IC_CaptureCallback>
 80052f4:	e005      	b.n	8005302 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fadc 	bl	80058b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 faed 	bl	80058dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0201 	mvn.w	r2, #1
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fb fd0e 	bl	8000d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00c      	beq.n	800535a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f001 f8a9 	bl	80064ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00c      	beq.n	800537e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 f8a1 	bl	80064c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00c      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 faa7 	bl	80058f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f06f 0220 	mvn.w	r2, #32
 80053be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 f869 	bl	8006498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80053e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f001 f875 	bl	80064d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00c      	beq.n	800540e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f001 f86d 	bl	80064e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800542a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 f865 	bl	80064fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00c      	beq.n	8005456 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800544e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 f85d 	bl	8006510 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800547a:	2302      	movs	r3, #2
 800547c:	e0ff      	b.n	800567e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b14      	cmp	r3, #20
 800548a:	f200 80f0 	bhi.w	800566e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800548e:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054e9 	.word	0x080054e9
 8005498:	0800566f 	.word	0x0800566f
 800549c:	0800566f 	.word	0x0800566f
 80054a0:	0800566f 	.word	0x0800566f
 80054a4:	08005529 	.word	0x08005529
 80054a8:	0800566f 	.word	0x0800566f
 80054ac:	0800566f 	.word	0x0800566f
 80054b0:	0800566f 	.word	0x0800566f
 80054b4:	0800556b 	.word	0x0800556b
 80054b8:	0800566f 	.word	0x0800566f
 80054bc:	0800566f 	.word	0x0800566f
 80054c0:	0800566f 	.word	0x0800566f
 80054c4:	080055ab 	.word	0x080055ab
 80054c8:	0800566f 	.word	0x0800566f
 80054cc:	0800566f 	.word	0x0800566f
 80054d0:	0800566f 	.word	0x0800566f
 80054d4:	080055ed 	.word	0x080055ed
 80054d8:	0800566f 	.word	0x0800566f
 80054dc:	0800566f 	.word	0x0800566f
 80054e0:	0800566f 	.word	0x0800566f
 80054e4:	0800562d 	.word	0x0800562d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68b9      	ldr	r1, [r7, #8]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fabc 	bl	8005a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0208 	orr.w	r2, r2, #8
 8005502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0204 	bic.w	r2, r2, #4
 8005512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6999      	ldr	r1, [r3, #24]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	619a      	str	r2, [r3, #24]
      break;
 8005526:	e0a5      	b.n	8005674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fb36 	bl	8005ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6999      	ldr	r1, [r3, #24]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	021a      	lsls	r2, r3, #8
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	619a      	str	r2, [r3, #24]
      break;
 8005568:	e084      	b.n	8005674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fba9 	bl	8005cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0208 	orr.w	r2, r2, #8
 8005584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0204 	bic.w	r2, r2, #4
 8005594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69d9      	ldr	r1, [r3, #28]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	61da      	str	r2, [r3, #28]
      break;
 80055a8:	e064      	b.n	8005674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fc1b 	bl	8005dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69d9      	ldr	r1, [r3, #28]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	021a      	lsls	r2, r3, #8
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	61da      	str	r2, [r3, #28]
      break;
 80055ea:	e043      	b.n	8005674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fc8e 	bl	8005f14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0208 	orr.w	r2, r2, #8
 8005606:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0204 	bic.w	r2, r2, #4
 8005616:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800562a:	e023      	b.n	8005674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fcd8 	bl	8005fe8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005646:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005656:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	021a      	lsls	r2, r3, #8
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800566c:	e002      	b.n	8005674 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	75fb      	strb	r3, [r7, #23]
      break;
 8005672:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800567c:	7dfb      	ldrb	r3, [r7, #23]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop

08005688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_TIM_ConfigClockSource+0x1c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e0f6      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x20a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80056c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a6f      	ldr	r2, [pc, #444]	@ (800589c <HAL_TIM_ConfigClockSource+0x214>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	f000 80c1 	beq.w	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 80056e4:	4a6d      	ldr	r2, [pc, #436]	@ (800589c <HAL_TIM_ConfigClockSource+0x214>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	f200 80c6 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 80056ec:	4a6c      	ldr	r2, [pc, #432]	@ (80058a0 <HAL_TIM_ConfigClockSource+0x218>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	f000 80b9 	beq.w	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 80056f4:	4a6a      	ldr	r2, [pc, #424]	@ (80058a0 <HAL_TIM_ConfigClockSource+0x218>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	f200 80be 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 80056fc:	4a69      	ldr	r2, [pc, #420]	@ (80058a4 <HAL_TIM_ConfigClockSource+0x21c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	f000 80b1 	beq.w	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 8005704:	4a67      	ldr	r2, [pc, #412]	@ (80058a4 <HAL_TIM_ConfigClockSource+0x21c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	f200 80b6 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 800570c:	4a66      	ldr	r2, [pc, #408]	@ (80058a8 <HAL_TIM_ConfigClockSource+0x220>)
 800570e:	4293      	cmp	r3, r2
 8005710:	f000 80a9 	beq.w	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 8005714:	4a64      	ldr	r2, [pc, #400]	@ (80058a8 <HAL_TIM_ConfigClockSource+0x220>)
 8005716:	4293      	cmp	r3, r2
 8005718:	f200 80ae 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 800571c:	4a63      	ldr	r2, [pc, #396]	@ (80058ac <HAL_TIM_ConfigClockSource+0x224>)
 800571e:	4293      	cmp	r3, r2
 8005720:	f000 80a1 	beq.w	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 8005724:	4a61      	ldr	r2, [pc, #388]	@ (80058ac <HAL_TIM_ConfigClockSource+0x224>)
 8005726:	4293      	cmp	r3, r2
 8005728:	f200 80a6 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 800572c:	4a60      	ldr	r2, [pc, #384]	@ (80058b0 <HAL_TIM_ConfigClockSource+0x228>)
 800572e:	4293      	cmp	r3, r2
 8005730:	f000 8099 	beq.w	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 8005734:	4a5e      	ldr	r2, [pc, #376]	@ (80058b0 <HAL_TIM_ConfigClockSource+0x228>)
 8005736:	4293      	cmp	r3, r2
 8005738:	f200 809e 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 800573c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005740:	f000 8091 	beq.w	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 8005744:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005748:	f200 8096 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 800574c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005750:	f000 8089 	beq.w	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 8005754:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005758:	f200 808e 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 800575c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005760:	d03e      	beq.n	80057e0 <HAL_TIM_ConfigClockSource+0x158>
 8005762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005766:	f200 8087 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576e:	f000 8086 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x1f6>
 8005772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005776:	d87f      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 8005778:	2b70      	cmp	r3, #112	@ 0x70
 800577a:	d01a      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x12a>
 800577c:	2b70      	cmp	r3, #112	@ 0x70
 800577e:	d87b      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 8005780:	2b60      	cmp	r3, #96	@ 0x60
 8005782:	d050      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x19e>
 8005784:	2b60      	cmp	r3, #96	@ 0x60
 8005786:	d877      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 8005788:	2b50      	cmp	r3, #80	@ 0x50
 800578a:	d03c      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x17e>
 800578c:	2b50      	cmp	r3, #80	@ 0x50
 800578e:	d873      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 8005790:	2b40      	cmp	r3, #64	@ 0x40
 8005792:	d058      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x1be>
 8005794:	2b40      	cmp	r3, #64	@ 0x40
 8005796:	d86f      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 8005798:	2b30      	cmp	r3, #48	@ 0x30
 800579a:	d064      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 800579c:	2b30      	cmp	r3, #48	@ 0x30
 800579e:	d86b      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d060      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d867      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d05c      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d05a      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x1de>
 80057b0:	e062      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057c2:	f000 fcf9 	bl	80061b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	609a      	str	r2, [r3, #8]
      break;
 80057de:	e04f      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057f0:	f000 fce2 	bl	80061b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005802:	609a      	str	r2, [r3, #8]
      break;
 8005804:	e03c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005812:	461a      	mov	r2, r3
 8005814:	f000 fc54 	bl	80060c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2150      	movs	r1, #80	@ 0x50
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fcad 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005824:	e02c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005832:	461a      	mov	r2, r3
 8005834:	f000 fc73 	bl	800611e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2160      	movs	r1, #96	@ 0x60
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fc9d 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005844:	e01c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005852:	461a      	mov	r2, r3
 8005854:	f000 fc34 	bl	80060c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2140      	movs	r1, #64	@ 0x40
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fc8d 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005864:	e00c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f000 fc84 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005876:	e003      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      break;
 800587c:	e000      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800587e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	00100070 	.word	0x00100070
 80058a0:	00100060 	.word	0x00100060
 80058a4:	00100050 	.word	0x00100050
 80058a8:	00100040 	.word	0x00100040
 80058ac:	00100030 	.word	0x00100030
 80058b0:	00100020 	.word	0x00100020

080058b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a4c      	ldr	r2, [pc, #304]	@ (8005a48 <TIM_Base_SetConfig+0x144>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d017      	beq.n	800594c <TIM_Base_SetConfig+0x48>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005922:	d013      	beq.n	800594c <TIM_Base_SetConfig+0x48>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a49      	ldr	r2, [pc, #292]	@ (8005a4c <TIM_Base_SetConfig+0x148>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00f      	beq.n	800594c <TIM_Base_SetConfig+0x48>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a48      	ldr	r2, [pc, #288]	@ (8005a50 <TIM_Base_SetConfig+0x14c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00b      	beq.n	800594c <TIM_Base_SetConfig+0x48>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a47      	ldr	r2, [pc, #284]	@ (8005a54 <TIM_Base_SetConfig+0x150>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <TIM_Base_SetConfig+0x48>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a46      	ldr	r2, [pc, #280]	@ (8005a58 <TIM_Base_SetConfig+0x154>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_Base_SetConfig+0x48>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a45      	ldr	r2, [pc, #276]	@ (8005a5c <TIM_Base_SetConfig+0x158>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d108      	bne.n	800595e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a39      	ldr	r2, [pc, #228]	@ (8005a48 <TIM_Base_SetConfig+0x144>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d023      	beq.n	80059ae <TIM_Base_SetConfig+0xaa>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800596c:	d01f      	beq.n	80059ae <TIM_Base_SetConfig+0xaa>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a36      	ldr	r2, [pc, #216]	@ (8005a4c <TIM_Base_SetConfig+0x148>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01b      	beq.n	80059ae <TIM_Base_SetConfig+0xaa>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a35      	ldr	r2, [pc, #212]	@ (8005a50 <TIM_Base_SetConfig+0x14c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d017      	beq.n	80059ae <TIM_Base_SetConfig+0xaa>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a34      	ldr	r2, [pc, #208]	@ (8005a54 <TIM_Base_SetConfig+0x150>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <TIM_Base_SetConfig+0xaa>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a33      	ldr	r2, [pc, #204]	@ (8005a58 <TIM_Base_SetConfig+0x154>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <TIM_Base_SetConfig+0xaa>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a33      	ldr	r2, [pc, #204]	@ (8005a60 <TIM_Base_SetConfig+0x15c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00b      	beq.n	80059ae <TIM_Base_SetConfig+0xaa>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a32      	ldr	r2, [pc, #200]	@ (8005a64 <TIM_Base_SetConfig+0x160>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_Base_SetConfig+0xaa>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a31      	ldr	r2, [pc, #196]	@ (8005a68 <TIM_Base_SetConfig+0x164>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_Base_SetConfig+0xaa>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2c      	ldr	r2, [pc, #176]	@ (8005a5c <TIM_Base_SetConfig+0x158>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d108      	bne.n	80059c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a18      	ldr	r2, [pc, #96]	@ (8005a48 <TIM_Base_SetConfig+0x144>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <TIM_Base_SetConfig+0x110>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005a58 <TIM_Base_SetConfig+0x154>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00f      	beq.n	8005a14 <TIM_Base_SetConfig+0x110>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a60 <TIM_Base_SetConfig+0x15c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <TIM_Base_SetConfig+0x110>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a19      	ldr	r2, [pc, #100]	@ (8005a64 <TIM_Base_SetConfig+0x160>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_Base_SetConfig+0x110>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a18      	ldr	r2, [pc, #96]	@ (8005a68 <TIM_Base_SetConfig+0x164>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_Base_SetConfig+0x110>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a13      	ldr	r2, [pc, #76]	@ (8005a5c <TIM_Base_SetConfig+0x158>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d103      	bne.n	8005a1c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d105      	bne.n	8005a3a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f023 0201 	bic.w	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	611a      	str	r2, [r3, #16]
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40000800 	.word	0x40000800
 8005a54:	40000c00 	.word	0x40000c00
 8005a58:	40013400 	.word	0x40013400
 8005a5c:	40015000 	.word	0x40015000
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800

08005a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f023 0201 	bic.w	r2, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 0302 	bic.w	r3, r3, #2
 8005ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a30      	ldr	r2, [pc, #192]	@ (8005b88 <TIM_OC1_SetConfig+0x11c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d013      	beq.n	8005af4 <TIM_OC1_SetConfig+0x88>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a2f      	ldr	r2, [pc, #188]	@ (8005b8c <TIM_OC1_SetConfig+0x120>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00f      	beq.n	8005af4 <TIM_OC1_SetConfig+0x88>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a2e      	ldr	r2, [pc, #184]	@ (8005b90 <TIM_OC1_SetConfig+0x124>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00b      	beq.n	8005af4 <TIM_OC1_SetConfig+0x88>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a2d      	ldr	r2, [pc, #180]	@ (8005b94 <TIM_OC1_SetConfig+0x128>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <TIM_OC1_SetConfig+0x88>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8005b98 <TIM_OC1_SetConfig+0x12c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC1_SetConfig+0x88>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a2b      	ldr	r2, [pc, #172]	@ (8005b9c <TIM_OC1_SetConfig+0x130>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10c      	bne.n	8005b0e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0308 	bic.w	r3, r3, #8
 8005afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f023 0304 	bic.w	r3, r3, #4
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1d      	ldr	r2, [pc, #116]	@ (8005b88 <TIM_OC1_SetConfig+0x11c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <TIM_OC1_SetConfig+0xd2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1c      	ldr	r2, [pc, #112]	@ (8005b8c <TIM_OC1_SetConfig+0x120>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00f      	beq.n	8005b3e <TIM_OC1_SetConfig+0xd2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1b      	ldr	r2, [pc, #108]	@ (8005b90 <TIM_OC1_SetConfig+0x124>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <TIM_OC1_SetConfig+0xd2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1a      	ldr	r2, [pc, #104]	@ (8005b94 <TIM_OC1_SetConfig+0x128>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d007      	beq.n	8005b3e <TIM_OC1_SetConfig+0xd2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a19      	ldr	r2, [pc, #100]	@ (8005b98 <TIM_OC1_SetConfig+0x12c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_OC1_SetConfig+0xd2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a18      	ldr	r2, [pc, #96]	@ (8005b9c <TIM_OC1_SetConfig+0x130>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d111      	bne.n	8005b62 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	621a      	str	r2, [r3, #32]
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40013400 	.word	0x40013400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800
 8005b9c:	40015000 	.word	0x40015000

08005ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f023 0210 	bic.w	r2, r3, #16
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0320 	bic.w	r3, r3, #32
 8005bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8005cb0 <TIM_OC2_SetConfig+0x110>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d007      	beq.n	8005c14 <TIM_OC2_SetConfig+0x74>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a2b      	ldr	r2, [pc, #172]	@ (8005cb4 <TIM_OC2_SetConfig+0x114>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <TIM_OC2_SetConfig+0x74>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005cb8 <TIM_OC2_SetConfig+0x118>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d10d      	bne.n	8005c30 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb0 <TIM_OC2_SetConfig+0x110>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d013      	beq.n	8005c60 <TIM_OC2_SetConfig+0xc0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005cb4 <TIM_OC2_SetConfig+0x114>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00f      	beq.n	8005c60 <TIM_OC2_SetConfig+0xc0>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a1e      	ldr	r2, [pc, #120]	@ (8005cbc <TIM_OC2_SetConfig+0x11c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00b      	beq.n	8005c60 <TIM_OC2_SetConfig+0xc0>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc0 <TIM_OC2_SetConfig+0x120>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d007      	beq.n	8005c60 <TIM_OC2_SetConfig+0xc0>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc4 <TIM_OC2_SetConfig+0x124>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_OC2_SetConfig+0xc0>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a17      	ldr	r2, [pc, #92]	@ (8005cb8 <TIM_OC2_SetConfig+0x118>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d113      	bne.n	8005c88 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40012c00 	.word	0x40012c00
 8005cb4:	40013400 	.word	0x40013400
 8005cb8:	40015000 	.word	0x40015000
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40014400 	.word	0x40014400
 8005cc4:	40014800 	.word	0x40014800

08005cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd4 <TIM_OC3_SetConfig+0x10c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_OC3_SetConfig+0x72>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005dd8 <TIM_OC3_SetConfig+0x110>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_OC3_SetConfig+0x72>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a29      	ldr	r2, [pc, #164]	@ (8005ddc <TIM_OC3_SetConfig+0x114>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d10d      	bne.n	8005d56 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd4 <TIM_OC3_SetConfig+0x10c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <TIM_OC3_SetConfig+0xbe>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd8 <TIM_OC3_SetConfig+0x110>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00f      	beq.n	8005d86 <TIM_OC3_SetConfig+0xbe>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1d      	ldr	r2, [pc, #116]	@ (8005de0 <TIM_OC3_SetConfig+0x118>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00b      	beq.n	8005d86 <TIM_OC3_SetConfig+0xbe>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1c      	ldr	r2, [pc, #112]	@ (8005de4 <TIM_OC3_SetConfig+0x11c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d007      	beq.n	8005d86 <TIM_OC3_SetConfig+0xbe>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a1b      	ldr	r2, [pc, #108]	@ (8005de8 <TIM_OC3_SetConfig+0x120>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_OC3_SetConfig+0xbe>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a16      	ldr	r2, [pc, #88]	@ (8005ddc <TIM_OC3_SetConfig+0x114>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d113      	bne.n	8005dae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	621a      	str	r2, [r3, #32]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40013400 	.word	0x40013400
 8005ddc:	40015000 	.word	0x40015000
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800

08005dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	031b      	lsls	r3, r3, #12
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8005efc <TIM_OC4_SetConfig+0x110>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d007      	beq.n	8005e60 <TIM_OC4_SetConfig+0x74>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a2b      	ldr	r2, [pc, #172]	@ (8005f00 <TIM_OC4_SetConfig+0x114>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_OC4_SetConfig+0x74>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005f04 <TIM_OC4_SetConfig+0x118>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10d      	bne.n	8005e7c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	031b      	lsls	r3, r3, #12
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005efc <TIM_OC4_SetConfig+0x110>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d013      	beq.n	8005eac <TIM_OC4_SetConfig+0xc0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a1e      	ldr	r2, [pc, #120]	@ (8005f00 <TIM_OC4_SetConfig+0x114>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00f      	beq.n	8005eac <TIM_OC4_SetConfig+0xc0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005f08 <TIM_OC4_SetConfig+0x11c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00b      	beq.n	8005eac <TIM_OC4_SetConfig+0xc0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a1d      	ldr	r2, [pc, #116]	@ (8005f0c <TIM_OC4_SetConfig+0x120>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d007      	beq.n	8005eac <TIM_OC4_SetConfig+0xc0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005f10 <TIM_OC4_SetConfig+0x124>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_OC4_SetConfig+0xc0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a17      	ldr	r2, [pc, #92]	@ (8005f04 <TIM_OC4_SetConfig+0x118>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d113      	bne.n	8005ed4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eb2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005eba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	019b      	lsls	r3, r3, #6
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	621a      	str	r2, [r3, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40012c00 	.word	0x40012c00
 8005f00:	40013400 	.word	0x40013400
 8005f04:	40015000 	.word	0x40015000
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800

08005f14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a19      	ldr	r2, [pc, #100]	@ (8005fd0 <TIM_OC5_SetConfig+0xbc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <TIM_OC5_SetConfig+0x82>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a18      	ldr	r2, [pc, #96]	@ (8005fd4 <TIM_OC5_SetConfig+0xc0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00f      	beq.n	8005f96 <TIM_OC5_SetConfig+0x82>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a17      	ldr	r2, [pc, #92]	@ (8005fd8 <TIM_OC5_SetConfig+0xc4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00b      	beq.n	8005f96 <TIM_OC5_SetConfig+0x82>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a16      	ldr	r2, [pc, #88]	@ (8005fdc <TIM_OC5_SetConfig+0xc8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d007      	beq.n	8005f96 <TIM_OC5_SetConfig+0x82>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a15      	ldr	r2, [pc, #84]	@ (8005fe0 <TIM_OC5_SetConfig+0xcc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d003      	beq.n	8005f96 <TIM_OC5_SetConfig+0x82>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a14      	ldr	r2, [pc, #80]	@ (8005fe4 <TIM_OC5_SetConfig+0xd0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d109      	bne.n	8005faa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	621a      	str	r2, [r3, #32]
}
 8005fc4:	bf00      	nop
 8005fc6:	371c      	adds	r7, #28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	40013400 	.word	0x40013400
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40014400 	.word	0x40014400
 8005fe0:	40014800 	.word	0x40014800
 8005fe4:	40015000 	.word	0x40015000

08005fe8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800602e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	051b      	lsls	r3, r3, #20
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a1a      	ldr	r2, [pc, #104]	@ (80060a8 <TIM_OC6_SetConfig+0xc0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <TIM_OC6_SetConfig+0x84>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a19      	ldr	r2, [pc, #100]	@ (80060ac <TIM_OC6_SetConfig+0xc4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00f      	beq.n	800606c <TIM_OC6_SetConfig+0x84>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a18      	ldr	r2, [pc, #96]	@ (80060b0 <TIM_OC6_SetConfig+0xc8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00b      	beq.n	800606c <TIM_OC6_SetConfig+0x84>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a17      	ldr	r2, [pc, #92]	@ (80060b4 <TIM_OC6_SetConfig+0xcc>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d007      	beq.n	800606c <TIM_OC6_SetConfig+0x84>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a16      	ldr	r2, [pc, #88]	@ (80060b8 <TIM_OC6_SetConfig+0xd0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d003      	beq.n	800606c <TIM_OC6_SetConfig+0x84>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a15      	ldr	r2, [pc, #84]	@ (80060bc <TIM_OC6_SetConfig+0xd4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d109      	bne.n	8006080 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006072:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	029b      	lsls	r3, r3, #10
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40013400 	.word	0x40013400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800
 80060bc:	40015000 	.word	0x40015000

080060c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0201 	bic.w	r2, r3, #1
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f023 030a 	bic.w	r3, r3, #10
 80060fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800611e:	b480      	push	{r7}
 8006120:	b087      	sub	sp, #28
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	f023 0210 	bic.w	r2, r3, #16
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	031b      	lsls	r3, r3, #12
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800615a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f043 0307 	orr.w	r3, r3, #7
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	431a      	orrs	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	2201      	movs	r2, #1
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1a      	ldr	r2, [r3, #32]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	43db      	mvns	r3, r3
 800621a:	401a      	ands	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1a      	ldr	r2, [r3, #32]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	fa01 f303 	lsl.w	r3, r1, r3
 8006230:	431a      	orrs	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006258:	2302      	movs	r3, #2
 800625a:	e074      	b.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a34      	ldr	r2, [pc, #208]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a33      	ldr	r2, [pc, #204]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a31      	ldr	r2, [pc, #196]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d108      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80062b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a21      	ldr	r2, [pc, #132]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d022      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062dc:	d01d      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d018      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a15      	ldr	r2, [pc, #84]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a18      	ldr	r2, [pc, #96]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a11      	ldr	r2, [pc, #68]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10c      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4313      	orrs	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40012c00 	.word	0x40012c00
 8006358:	40013400 	.word	0x40013400
 800635c:	40015000 	.word	0x40015000
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800
 8006368:	40000c00 	.word	0x40000c00
 800636c:	40014000 	.word	0x40014000

08006370 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006388:	2302      	movs	r3, #2
 800638a:	e078      	b.n	800647e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	041b      	lsls	r3, r3, #16
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1c      	ldr	r2, [pc, #112]	@ (800648c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d009      	beq.n	8006432 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1b      	ldr	r2, [pc, #108]	@ (8006490 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d004      	beq.n	8006432 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a19      	ldr	r2, [pc, #100]	@ (8006494 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d11c      	bne.n	800646c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643c:	051b      	lsls	r3, r3, #20
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40012c00 	.word	0x40012c00
 8006490:	40013400 	.word	0x40013400
 8006494:	40015000 	.word	0x40015000

08006498 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <memset>:
 8006524:	4402      	add	r2, r0
 8006526:	4603      	mov	r3, r0
 8006528:	4293      	cmp	r3, r2
 800652a:	d100      	bne.n	800652e <memset+0xa>
 800652c:	4770      	bx	lr
 800652e:	f803 1b01 	strb.w	r1, [r3], #1
 8006532:	e7f9      	b.n	8006528 <memset+0x4>

08006534 <__libc_init_array>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	4d0d      	ldr	r5, [pc, #52]	@ (800656c <__libc_init_array+0x38>)
 8006538:	4c0d      	ldr	r4, [pc, #52]	@ (8006570 <__libc_init_array+0x3c>)
 800653a:	1b64      	subs	r4, r4, r5
 800653c:	10a4      	asrs	r4, r4, #2
 800653e:	2600      	movs	r6, #0
 8006540:	42a6      	cmp	r6, r4
 8006542:	d109      	bne.n	8006558 <__libc_init_array+0x24>
 8006544:	4d0b      	ldr	r5, [pc, #44]	@ (8006574 <__libc_init_array+0x40>)
 8006546:	4c0c      	ldr	r4, [pc, #48]	@ (8006578 <__libc_init_array+0x44>)
 8006548:	f000 f818 	bl	800657c <_init>
 800654c:	1b64      	subs	r4, r4, r5
 800654e:	10a4      	asrs	r4, r4, #2
 8006550:	2600      	movs	r6, #0
 8006552:	42a6      	cmp	r6, r4
 8006554:	d105      	bne.n	8006562 <__libc_init_array+0x2e>
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	f855 3b04 	ldr.w	r3, [r5], #4
 800655c:	4798      	blx	r3
 800655e:	3601      	adds	r6, #1
 8006560:	e7ee      	b.n	8006540 <__libc_init_array+0xc>
 8006562:	f855 3b04 	ldr.w	r3, [r5], #4
 8006566:	4798      	blx	r3
 8006568:	3601      	adds	r6, #1
 800656a:	e7f2      	b.n	8006552 <__libc_init_array+0x1e>
 800656c:	080065a4 	.word	0x080065a4
 8006570:	080065a4 	.word	0x080065a4
 8006574:	080065a4 	.word	0x080065a4
 8006578:	080065a8 	.word	0x080065a8

0800657c <_init>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	bf00      	nop
 8006580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006582:	bc08      	pop	{r3}
 8006584:	469e      	mov	lr, r3
 8006586:	4770      	bx	lr

08006588 <_fini>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	bf00      	nop
 800658c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658e:	bc08      	pop	{r3}
 8006590:	469e      	mov	lr, r3
 8006592:	4770      	bx	lr
